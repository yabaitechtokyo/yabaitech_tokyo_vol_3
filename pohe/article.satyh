@import: ../book-class
@import: ../lib/typeset/code2

module Pohe : sig
  val article : block-text
end = struct

let bibliography = [
    (`l4`, Article(|
        author = {| Jochen Liedtke |};
        title = {Improving IPC by kernel design};
        journal = {14th ACM Symposium on Operating System Principles};
        volume = None;
        number = None;
        pages = (175, 188);
        year = 1993;
    |));
    (`l4_wikipedia`, WebSite(|
        author = {| ウィキペディアの執筆者 |};
        title = {L4マイクロカーネルファミリー};
        url = `https://ja.wikipedia.org/wiki/L4マイクロカーネルファミリー`;
        year = 2019;
    |));
    (`philipps`, WebSite(|
        author = {| Philipp Oppermann |};
        title = {Writing an OS in Rust };
        url = `https://os.phil-opp.com`;
        year = 2019;
    |));
    (`multiboot1`, WebSite(|
        author = {| Free Software Foundation, Inc. |};
        title = {Multiboot Specification version 0.6.96};
        url = `https://www.gnu.org/software/grub/manual/multiboot/multiboot.html`;
        year = 2010;
    |));
    (`multiboot2`, WebSite(|
        author = {| Free Software Foundation, Inc. |};
        title = {https://www.gnu.org/software/grub/manual/multiboot2/multiboot.html};
        url = `https://www.gnu.org/software/grub/manual/multiboot2/multiboot.html`;
        year = 2016;
    |));
    (`using_ld`, WebSite(|
        author = {| Free Software Foundation, Inc. |};
        title = {Red Hat Enterprise Linux 4 Using ld, the Gnu Linker};
        url = `https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/4/html/Using_ld_the_GNU_Linker/index.html`;
        year = 2004;
    |));
    (`gcc_ld`, WebSite(|
        author = {| csukuangfj |};
        title = {This file shows the default linker script of \`ld\`, use \`ld --verbose\` to show it. };
        url = `https://gist.github.com/csukuangfj/c4bd4f406912850efcbedd2367ac5f33`;
        year = 2019;
    |));
    (`gdt_osdev`, WebSite(|
        author = {| OSDev Wiki Contributors |};
        title = {Setting Up Long Mode - OSDev Wiki};
        url = `https://wiki.osdev.org/Setting_Up_Long_Mode`;
        year = 2018;
    |));
    (`erkos`, WebSite(|
        author = {| garasubo |};
        title = {garasubo/erkos: A prototype embedded operating system written in Rust};
        url = `https://github.com/garasubo/erkos`;
        year = 2019;
    |));
]

let article = '<
    +chapter ?:(`pohe-article`)
    (|
        bibliography = bibliography;
        title = {Writing a (micro)kernel in Rust in 12 days - 2.5th day -};
        author = {nullpo-head};
    |)
    <
+section {前回までのあらすじ} <

+p{

久しぶり！今回のYabaitech.Tokyoでも、前号の続きとしてRustでのマイクロカーネル開発をやっていこう。
この連載は、私がRustでマイクロカーネルを開発する開発のログを、皆さんと共有するためのものだ。
その過程で、Rustによるカーネル開発の最高な点や厄介な点を、皆さんにご紹介していきたい。
そして、全ての開発が終わった暁には、たった12日間でRustでカーネルを実装するための、ちょうどいいチュートリアルができあがっている（はず）だろう。
\footnote{
  これは希望的観測だ。そして、12日間で終わるチュートリアルでも、チュートリアルそれ自体を書くことはとても12日間では終わらないようだ！
}
前提知識としては、 実際に自分でゼロからカーネルを書いてみたことはなくていいけれど、カーネルの仕組みのだいたいのイメージを把握していることを仮定している。
CPUのプロテクションモード、と聞いて意味は分かるけれど、x86の具体的なモードまでは覚えていない。アセンブリがどのようなものかなんとなくわかるけれど、あまり書いたことはない、とかその程度だ。
本文中で、C言語のコード、Makefile、それにリンカスクリプトだとかが簡単な説明だけで出てくることになる。
詳細な説明こそはしないが、Wikipediaの一段落目に出てきそうな説明文くらいは書いてあるからある程度安心してほしい。

}
+p{

前号では、12日間のうちの最初の一日目として、マイクロカーネルの歴史とL4カーネルについて説明し、
L4Ka::Pistachioカーネルをコンパイルして起動させてみたのだった。
さらに、二日目では、Phillipp氏の"Writing an OS in Rust"\cite[`philipps`];に従って、
Rustで小さなカーネル（と呼ぶことにしたベアメタルプログラム)を実装して、Qemuで動かした。
このときPhilipp氏の\code(`bootloader`); crateを用いてブートを実現したのだが、
これが後々マイクロカーネルを作るにあたって不都合になってしまう。
そこで、Multiboot規格\cite[`multiboot2`];に沿ったブート方式にカーネルを書き直す必要があった。
しかし、その部分で前回の連載は終了となってしまったのだった。なので今回は、この"2.5th day"を完成させていく記事になる。

}
+p{

2.5日目に早速進む前に、少しマイクロカーネルの歴史とL4カーネルについて振り返ってみよう。
Machに代表されるような伝統的なマイクロカーネルは、IPCのパフォーマンスに悪さに悩まされていた。
マイクロカーネルでは、システムコールがサーバー間の複数のIPCで実装され、そしてIPCはコンテキストスイッチを伴う。
一方、モノリシックカーネルのシステムコールは通常1回のコンテキストスイッチで済むから、
比較するとマイクロカーネルではシステムコールのコストが割高になってしまう。
そこで、Jochen Liedtke先生が最初に実装したL4マイクロカーネルファミリーは、
「極小性」をキーコンセプトとしてカーネルを再設計しなおし、パフォーマンスの高速化を図った。
IPCの機構はMachに比べて極端に単純になり、IPCのメッセージサイズはCPUのキャッシュに乗るよう再設計された。
プロセスのスケジューリングも単純化され、IPCを高速化するいくつかの工夫も導入された。
さらに初期のカーネルにいたってはすべてアセンブリで書いてしまうという執念の入りようで、ありうる極小のマイクロカーネルを完成させた。
その結果として、L4のIPCはMachに比べて20倍も高速化したのだった。\cite[`l4`];\cite[`l4_wikipedia`];

}
+p{

そして、L4の極小性は短期間でカーネルを自作してみるのにぴったりな性質だ！
今回実装ターゲットにしたL4 X.2 Standardでは、定義されているシステムコールが12個しかない。
この連載が、12日でカーネルを作る、と言い張っているのは、APIが12個しかない、というこの事実をあてにしているからだ。
いま"Standard"と書いたように、L4ファミリーにはL4カーネルが実装しているべきシステムコールやそのABI、割り込みハンドリングの規約などを定めた標準仕様が存在する。
これはちょうど、普段慣れ親しんでいるPOSIX規約のカーネル版、とでもいえるものだ。
これに準拠したカーネルを作れば、少ない修正でL4カーネル用のユーザーランドを動かせるようになるというわけ。
1日目でビルドしてみたPistachioカーネルは、このL4 X.2 Standardに準拠したL4カーネルだった。

具体的には、12個のシステムコールのリストは次の通り。

\enumerate {
    * \code(`KERNELINTERFACE`);
    * \code(`EXCHANGEREGISTERS`);
    * \code(`THREADCONTROL`);
    * \code(`SYSTEMCLOCK`);
    * \code(`THREADSWITCH`);
    * \code(`SCHEDULE`);
    * \code(`IPC`);
    * \code(`LIPC`);
    * \code(`UNMAP`);
    * \code(`SPACECONTROL`);
    * \code(`PROCESSORCONTROL`);
    * \code(`MEMORYCONTROL`);
}
冗談抜きでこれで全部だ。実にシンプルで小さい。
このシステムコールさえ実装すれば、おおよそPistachioと互換のカーネルができあがることになる。
そしてそれこそがこの連載の最終ゴールだ！

}

>  % section

+section {2.5th Day: Minimal Kernel in Rust with Multiboot2} <

+subsection{前回まで} <

+p{

それでは2.5日目を始めよう。前号ではPhilipps'
\footnote{
  Philipp氏の"Writing an OS in Rust"のことを、この連載では"Philipp's"と呼んでいる
}
にしたがって、どこまでカーネルを実装していたのだろう？
GitHub上のコードで言えば、このコミットのものまでであった。(\code(`https://github.com/nullpo-head/Rusty-L4/commit/72f400d7029a0431f87af27f64fb40abb3ff68ee`);)
これは、Philipp'sの"VGA Text Mode"
\footnote{
  https://os.phil-opp.com/vga-text-mode
}
の章を終えたときの実装に相当する。これをビルドして、Qemuを使って出力されたバイナリファイルを起動すると、\ref-figure(`fig:println`);が表示される。

\figure ?:(`fig:println`)
  {前号での最終画面}
  <+image-frame{\insert-image(14cm)(`pohe/figures/println.JPG`);}>

このときは、VGAのメモリ領域に書き込んでメッセージを表示するようなFree StandingなELFファイルをRustで書いた。
そして、そのELFのブートはPhilipp氏の\code(`bootloader`); crateと\code(`bootimage`); crateにお任せしたのだった。
それにより、私は自分自身でブートローダーを書くことなく、Rustプログラムを書くだけでx86_64アーキテクチャのブートから、
Rustランタイムの初期化まで簡単に達成できたのだった。

}

>  % subsection

+subsection{Boot with Multiboot2} <

+subsubsection{Bootloader Crate and Multiboot2} <

+p{

さて、では、その続きに進むとしよう！
今回やることは、\code(`bootloader`);を使うことをやめて、Multibootを使ったブートへと実装を変えることだ。
なぜそんなことをする必要があるのだろう？その理由は2つある。

}
+p{

一つ目は、現状の\code(`bootloader`); crateが、マイクロカーネル構成と少し相性が悪いこと。
マイクロカーネルは、ブートローダーに複数のELFファイルをマップしてもらえた方が実装がシンプルで済む。
マイクロカーネルは、複数のユーザーランドで動くサーバー群があって初めてオペレーティングシステムとして動作するわけだけど、
マイクロカーネルのカーネル部分は非常にシンプルなため、ファイルシステムをパースしてELFファイルをロードするような能力はない。
だから、このままでは、マイクロカーネルはそもそもサーバー群をメモリに展開することができない。
このような問題を解決するのが、まさにMultibootのBoot Modules機能だ。
MultibootのBoot Modulesをサポートするブートローダーは、複数のELFファイルをブートイメージから取り出して、メモリ上に展開しておいてくれる。
そして、カーネルを起動する際に、マップされたELFの情報を所定の方法でカーネルに渡してくれる。
逆に\code(`bootloader`); crateにはまだブートモジュールの機能はないため、少し工夫をしないとマイクロカーネルを起動することができないのだ。

}
+p{

二つ目の理由は、L4Ka::Pistachioの資産をスムーズに流用するためだ。
Pistachioカーネルは、ちょうどいま説明した理由でMultibootを使ってブートするようになっている。
基本的に私は、
1. まずPistachioで動くサーバーを実装してPistachioで動作を確認 
2. その後そのサーバーが自分で実装したカーネルでも動作するようシステムコールを作りこむ
、という順番で実装を進めていく予定だ。
だから、Multibootで自分のカーネルもブートするようにしておけば、Pistachioと自分のカーネルの差し替えがスムーズになるので、テストに都合がいい。
この2つの理由から、Multibootへと移行していこうと思う。

}

>  % subsubsection


+subsubsection{Write Multiboot2 Header, Linker Script, and Makefile} <

+p{

さて、もし最初の節で紹介したGitHub上のコミットをcloneしてくれていれば、現在のRusty L4
\footnote {
  前回、この連載で開発するRust製L4カーネルをそう名付けたのだった。
}
のディレクトリ構成は以下のようになるはずだ。前回の連載のコードをお手元にお持ちの方も、おおよそ似たような構成になっているだろう。

\d-code(`
  .
  ├── Cargo.lock
  ├── Cargo.toml
  ├── src
  │   ├── main.rs
  │   └── vga_buffer.rs
  └── x86_64-rusty_l4.json
`);

今回は、このコードに変更を加えていく。

}
+p{

今回は、しばらくRustの世界とお別れを告げることになる。
快適でモダンだったRustの世界から離れ、しばしアセンブリを地道に書いていくことになる。最終的なゴールは、アセンブリの世界からRustの世界へと舞い戻ることだ。
まず、初めに\code(`startup.S`);を加えよう。
今までは\code(`bootloader`); crateと\code(`bootimage`); crateに頼っていた、ブートからRustの関数にジャンプするまでの道のりを、このアセンブリファイルで置き換えることになる。
このファイルの先頭に早速書かなければならないのが、Multibootヘッダーだ。

\d-code(`
    .section .multiboot_header
    .balign  16
  _mb_header:
    .long 0xe85250d6			/* magic */
    .long 0x00000000			/* flags */
    .long _mb_header_end - _mb_header	/* header length */
    .long 0x100000000 - (0xe85250d6 + 0 + (_mb_header_end - _mb_header))
    .word 0x0
    .word 0x0
    .long 0x8
  _mb_header_end:
`);

Multibootの仕様に従ったカーネルを書くのは非常に簡単で、今書いたこの構造体が、カーネルイメージファイルの先頭32768バイトのどこかに、64bitアラインされた状態で埋め込まれているだけでいい。\cite[`multiboot2`];
もしカーネルイメージがELFフォーマットでない場合はもう少しメモリレイアウトに関する情報を書かなければならないが、
ELFフォーマットを使うなら、メモリレイアウトもELFをパースして勝手に読み取ってくれる。
上の構造体のフィールドに関する詳しい説明は、興味があれば仕様を参照してくれればわかるけど、基本は上のものをコピーして使いまわせばOKだ。
逆に気を付けなければいけないことは、Multibootのバージョンだ。
Multibootにはバージョン1とバージョン2があって、今まさに書いたのはバージョン2の方。
実は前号ではMultiboot1を使ったのだけれど、今回は2へと変更している。前号でビルドしたPistachioカーネルの方も、のちほどMultiboot2を使うように書き直そう。
どうしてバージョン2が必要かというと、ELF64ファイルのブートを簡単にできるからだ。バージョン1で64bit ELFをブートするのは困難が伴ってしまう。
そういう訳で、今回使うのはバージョン2の方になる。

}
+p{

次に、ブートされて最初に実行されるアセンブリを書いていこう。
Multiboot対応のブートローダーによってブートされたカーネルは、x86CPUでは32bit Protectedモードでブートローダーから処理が回ってくる。
このモードでは、CPUは32bitモードで動いていて、セグメントベースのメモリ保護機能は有効になっている。
しかし、ページング、つまり仮想アドレスは有効にされていない。
普段使っている64bit OSでは、CPUは64bitモードで動いていて、仮想アドレスも有効だ。このモードは64bitロングモードという。
今から書くスタートアップスクリプトは、32bit Protectedモードから処理をはじめ、最終的に64bitロングモードに入り、Rustのエントリー関数を呼び出すことが目的だ。
それをやるまでのステップは次のようになる。
\enumerate {
  * 仮のスタックを用意する。
  * Rustで本格的にメモリ管理を行うまでの間に使う、仮のメモリレイアウトでページングを有効にする。
  * Compatibility Longモードを有効化する。
  * 仮のGDTを用意する。
  * 64bit Longモードを有効化する。
  * Rustのエントリー関数へジャンプする。
}
これを順番にやっていくことになる。
まずは仮のスタックを用意して、シリアルポートからデバッグ出力を行う関数を作って動作を確認することから始めよう。

\d-code(`
  ###
  # The multiboot entry point
  ###
    .text
    .globl _start
  .code32
  _start:
    cli  // 割り込みの無効化
    cld  // DFをクリア
    movl $_mini_stack, %esp
  # Debug
    movb $'A', %al
    call _putc_serial
    hlt

  _putc_serial:
    movl $0x3f8, %edx
    outb %al, %dx
    ret

  ###
  # Stack
  ###
    .data
    .space	1 << 21
  _mini_stack:
`);

}
+p{

上のコードは、エントリーポイント、デバッグ用のシリアル出力関数、そしてRustでメモリ管理周りを書くまでお世話になるスタック領域から成っている。
ELFでは慣習的にエントリーポイントを\code(`_start`);シンボルにするのでそれに従う。
だから、私のアセンブリスクリプトでも、最初に実行される場所はここだ。
まず、\code(`_mini_stack`);に確保したスタック領域に\code(`esp`);を初期化する。
ところでこのスタックは、2MBという初期スタックとしては結構大きいサイズを使っているんだけれど、これはRustのコードを正しく動かすのに非常に重要なことなのだ。
Rustでは、ベアメタルでもかなりたくさんの標準ライブラリやcrateが使えることを前回の実装で見たと思う。
結果として、Cと違って関数を呼び出す際に消費されるスタックがかなり深くなるうえに、ライブラリでどの程度スタックが消費されるのかの予想が難しい。
例えば、Derefなんかが走る際にもきっちりスタックが消費されていくのだ。
だから、あらかじめかなり大きいサイズのスタックを使っておくと、後々奇妙なバグに悩まされることがなくなるだろう。
そのため、ここは学習のためにカーネルを書いている、と割り切って富豪的に割り当てておくことにした。

}
+p{

\code(`_putc_serial`);はデバッグのためのシリアルポート出力のための関数だ。
\code(`call`);命令を使って呼び出しているため、用意したスタックがきちんと消費できるかのスタックのテストも兼ねている。
\code(`call`);命令は戻りアドレスをスタックの先頭に積むからね。
\code(`_putc_serial`);では、シリアルポートを初期化することなく、いきなり0x3f8 + 5番に出力している。
これは本来はおかしなコードだが、Qemuでは、デバッグのために、初期化せずにシリアルポートをたたいても出力がうまくいくようになっている。
このコードはそれに甘えさせてもらっている。

}
+p{

せっかく書いたアセンブリだが、まだビルドするにはパーツが足りない。
\code(`startup.S`);を追加したら、次はリンカスクリプトだ。
このあと、さらにビルドスクリプトを兼ねたMakefileを追加して、極小カーネル、とまではいえないけど、ベアメタルプログラムである、\code(`startup.S`);をビルドしよう。
では、\code(`linker.ld`);を加えよう。

\d-code(`
  ENTRY(_start)

  SECTIONS {
      . = 1M;

      .text : 
      {
          *(.multiboot_header)
          *(.text*)
      }

      .rodata :
      {
          *(.rodata*)
      }

      .data :
      {
          *(.data*)
      }

      .bss :
      {
          *(.bss*)
      }
  }
`);

リンカスクリプトは、本当にベアメタルプログラミングをやったことがある人にしか馴染みがないだろう。
リンカがオブジェクトファイルのリンクを行う際、普段は何も指定しなくても平凡なELFファイルやそのほかの実行バイナリを出力してくれる。
この実行バイナリの作成を細かく制御するのに使えるのがこのリンカスクリプトだ。
リンカスクリプトに関する資料は本当に少なく、ほとんどGNU Ldのマニュアルである、"Using ld, the GNU Linker"くらいしかない。
見た目がきれいなため、ここではRedhatにホストされているバージョンを紹介しよう\cite[`using_ld`];。
しかし、これだけを読んでも特段リンカスクリプトが書けるようになるわけではない。
リンカスクリプトの使い方を理解するための、私が把握している唯一の方法は、既存のプロダクトのリンカスクリプトを読むことだ。
xv6のような小さなOSのリンカスクリプトは、とっかかりとして最高だ。意外と色々と網羅的に書かなくても、なんとなくリンクが成功することが分かるだろう。
LLVMプロジェクトのリンカである、lldの作者、ruiさんに聞いたところによると、リンカはリンカスクリプトがセクションを網羅していなくても、
良い感じに推測して配置してしまうらしい。ちなみに、ここらへんの仕様はあいまいで、undocumentedなんだってさ。
\footnote{
  https://twitter.com/rui314/status/1107777197689835520
}
xv6のリンカスクリプトとは逆に、GCCで暗黙的に使われているデフォルトのリンカスクリプトはかなり網羅的に書かれている。\cite[`gcc_ld`];
一度見てみると勉強になると思う。

}
+p{

さて、いま書いたリンカスクリプトは、かなりシンプルなものだ。
実際にリンカスクリプトを読者のあなたが書く際には、どちらにせよ先ほど紹介したドキュメントを一読しないと右も左も分からないだろうから、
ここでは雰囲気をつかんでもらうための説明に留めよう。

}
+p{

話を簡単にするためにELFフォーマットのことだけを考えよう。a.outやPEファイルもおおよそ似たようなものだ。
そもそも、ELFでは、プログラムのコードはいくつかのセクションというものに分かれている。
そして代表的なセクションが、リンカスクリプト上にもある\code(`.text`);, \code(`.rodata`);, \code(`.data`);, そして\code(`.bss`);だ。
それぞれ、普通の実行コード、定数値、初期値付きグローバル変数、そしてグローバル変数だが初期値が0のもの、が代表的な中身になる。
もちろんこれらの分類は、完全に各プログラミング言語のコンパイラ依存だから、あくまで、代表的な中身の話だ。
また、セクションの名前自体も代表的な名前なだけで、実際は可変だし、さらにほかにも代表的なセクションはたくさんある。

}
+p{

そして、リンカに与えられるオブジェクトファイル群の、そういったセクションを、どのようにまとめたうえで、どこのメモリアドレスに配置するか
制御できるのがリンカスクリプトだ。
今回書いたリンカスクリプトは、まず、エントリーポイントを標準的\code(`_start`);シンボルに設定している。
その後入力ファイルのセクションの配置について記述していく。
最初の部分で、まず、各セクションの配置の開始アドレスを、少なくとも1M以降になるよう現在アドレスを更新する。
これはx86アーキテクチャでのメモリホールを避けるためだ。
そのあとはシンプルに、代表的なセクションを配置している。漏れたセクションは良い感じに配置されるので実はこの部分の大半は書かなくても大丈夫だったりする。
大事なのは、最終出力に含まれる\code(`.text`);セクションに、\code(`.multiboot_header`);を含めていることだ。
これにより、マルチブートヘッダがtextセクションの最初に配置されることになる。
結果として、マルチブートヘッダがELFファイル上でも先頭の方に配置されることになり、Multiboot対応ブートローダが、このELFバイナリをカーネルとしてロードできるようになる。

}
+p{

詳しい人はここで少し違和感を感じるかもしれない！
どうしてマルチブートヘッダをtextセクションの中にいれるの？新しくセクションを作ったほうがいいんじゃない？と。
実は後日リンカをlldに変えるさい、それだとマルチブートヘッダがファイルの後方に配置されてしまい、うまくいかなくなる。
GCCはメモリ上に実際にロードされないセクションをELFファイル上で先頭の方に配置するけれど、逆にlldは後方に配置するのだ。
結果として、ブートローダがマルチブートヘッダを見つけられなくなってしまう。
その対策として、ここではtextセクションにマルチブートヘッダを入れてしまったのだが、後日マルチブートヘッダ単体でコンパイルして、先頭にくっつける方針に変えようかと思う。
だけどひとまず、今日のところはこの方針で行く。

}
+p{

さぁ、ビルドに必要な最後のパーツ、ビルドスクリプトを兼ねたMakefileを作ろう。

\d-code(`
  all: run

  build/kernel: src/linker.ld src/startup.S | build/
    gcc -fno-pic -no-pie -nostdlib -Tsrc/linker.ld -o build/kernel -Wl,-n src/startup.S  # - (1)

  build/:
    mkdir build

  build/os.iso: build/kernel grub.cfg  # - (2)
    mkdir -p build/isofiles/boot/grub
    cp build/kernel build/isofiles/boot/kernel.bin
    cp grub.cfg build/isofiles/boot/grub/
    grub-mkrescue -o build/os.iso build/isofiles

  run: build/os.iso
    qemu-system-x86_64 -cdrom build/os.iso -serial stdio -cpu Haswell,+pdpe1gb -no-reboot  # - (3)

  clean:
    rm -rf build
    cargo clean

  .PHONY: run all clean
`);

}
+p{

\code(`(1)`);で、先ほどまでに用意したstartup.Sとlinker.ldのアセンブルとリンクを行っている。
gccに先ほど書いたリンカスクリプトとアセンブリを渡して、最終的に\code(`build/kernel`);へと出力している。
ここで\code(`-fno-pic -no-pie`);を渡しているのは、PIEバイナリの出力を抑制するためだ。
最近のgccやclangでは、セキュリティの向上のためデフォルトでPosition Independent Executableを出力するのだけど、
この機能は配置アドレスを指定してリンクしたい私達の要求と衝突する。リンクが通らなくなるので必ず無効化しよう。
KASLRのような高度な機能は、今のところはスコープの範囲外だ。

}
+p{

これで、ブートすべきカーネルに当たる部分のビルドはできるようになった。
では、次はこれをブートするブートローダを用意する番だ！
今回は、Multiboot2をサポートするメジャーなブートローダであるgrub2を用いることにした。
最近のPCだと、grubがインストールされていないことも割とあるだろうから、grubの周辺ツールを使うため、まずはインストールから始めよう。
私の環境にいたってはWSLだから、もちろんgrubは入っていない。
以下のコマンドで必要となるツールをインストールしよう。
\d-code(`# apt install grub-common grub-pc-bin xorriso`);
これでインストールできるツールを使って、grubをつかったブータブルイメージを作成する。

}
+p{

\code(`(2)`);の部分を参照してほしい。
このMakeルールで、\code(`grub-mkrescue`);コマンドを使って、grubを使ってブータブルになった、isoイメージを作成する。
\code(`grub-mkrescue`);は、次のようなディレクトリを入力すると、それをブータブルなisoイメージにしてくれる。

\d-code(`
  .
  └── boot
      ├── grub
      │   └── grub.cfg
      └── kernel.bin
`);

このとき、\code(`grub-mkrescue`);は、ディレクトリ中の\code(`grub.cfg`);からブートの構成を読み取ってイメージを作成する。
そのための\code(`grub.cfg`);を、プロジェクトのルートディレクトリに追加してほしい。Makefileがこれを\code(`build/isofiles`);にコピーするようになっている。

\d-code(`
  set timeout=0
  set default=0

  menuentry "rusty l4" {
      multiboot2 /boot/kernel.bin
      boot
  }
`);

これで、完了だ！あとはmakeをするだけだ！
その前に一度、確認しやすいよう、現在のディレクトリ内容を載せておこう。

\d-code(`
.
├── Cargo.lock
├── Cargo.toml
├── Makefile
├── grub.cfg
├── src
│   ├── linker.ld
│   ├── main.rs
│   ├── startup.S
│   └── vga_buffer.rs
└── x86_64-rusty_l4.json

1 directory, 9 files
`);

}
+p{

確認が済んだらmakeしよう。
ルールにより、\code(`(3)`);のrunが実行され、Qemu上でブータブルディスクが実行される。
シリアル出力が標準出力にリダイレクトされるので、\code(`startup.S`);で書いたデバッグ出力、\code(`'A`);'が無事出力されれば成功だ。
実際に実行してみると次のようになる。

\d-code(`
  $ make
  mkdir build
  gcc -fno-pic -no-pie -nostdlib -Tsrc/linker.ld -o build/kernel -Wl,-n src/startup.S
  mkdir -p build/isofiles/boot/grub
  cp build/kernel build/isofiles/boot/kernel.bin
  cp grub.cfg build/isofiles/boot/grub/
  grub-mkrescue -o build/os.iso build/isofiles
  xorriso 1.4.8 : RockRidge filesystem manipulator, libburnia project.

  Drive current: -outdev 'stdio:build/os.iso'
  Media current: stdio file, overwriteable
  Media status : is blank
  Media summary: 0 sessions, 0 data blocks, 0 data, 69.8g free
  Added to ISO image: directory '/'='/tmp/grub.niGQlv'
  xorriso : UPDATE : 284 files added in 1 seconds
  Added to ISO image: directory '/'='/mnt/c/Users/abctk/Downloads/rusty_l4/2Rusty-L4/build/isofiles'
  xorriso : UPDATE : 288 files added in 1 seconds
  xorriso : NOTE : Copying to System Area: 512 bytes from file '/usr/lib/grub/i386-pc/boot_hybrid.img'
  xorriso : UPDATE :  54.62\% done
  ISO image produced: 3475 sectors
  Written to medium : 3475 sectors at LBA 0
  Writing to 'stdio:build/os.iso' completed successfully.

  qemu-system-x86_64 -cdrom build/os.iso -serial stdio -cpu Haswell,+pdpe1gb -no-reboot
  qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.fma [bit 12]
  qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.pcid [bit 17]
  qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.x2apic [bit 21]
  qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.tsc-deadline [bit 24]
  qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.avx [bit 28]
  qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.f16c [bit 29]
  qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.rdrand [bit 30]
  qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.07H:EBX.hle [bit 4]
  qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.07H:EBX.avx2 [bit 5]
  qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.07H:EBX.invpcid [bit 10]
  qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.07H:EBX.rtm [bit 11]
  A
`);

かなり長い出力の最後に印字されている、小さな'A'に注目してほしい！
この短い出力が、私の書いた小さなカーネルがきちんとブートされている証拠だ。
一度にたくさん書くことになってしまったが、無事\code(`startup.S`);がベアメタルで動いているようだ！


}

>  % subsubsection

+subsubsection{Jump to Rust} <

+p{

これで無事にブートができたわけだけど、実はやることはまだある。
最初の方で、\code(`startup.S`);がやらなければならないことのステップをこう書いた。
 
\enumerate {
  * 仮のスタックを用意する
  * Rustで本格的にメモリ管理を行うまでの間に使う、仮のメモリレイアウトでページングを有効にする。
  * Compatibility Longモードを有効化する。
  * 仮のGDTを用意する。
  * 64bit Longモードを有効化する。
  * Rustのエントリー関数へジャンプする。
}

そして、振り返ってみると終わったのはまだ、\code(`(1)`);だけだ。
ロングモードの世界に入って、さっさと Rust の世界に帰り、今日の作業を終わることにしようじゃないか。

}
+p{

まず、ページングの有効化だ。
個人的には、アセンブリのまま書くこの部分がいつも一番面倒だ！
x86アーキテクチャのページング、つまり仮想アドレス機構については語ることが多いが、アセンブリのままではあまり説明が分かりやすいようなコードにはならない。
そのうえ、当分のコードに必要なページ分だけ、仮想アドレスと物理アドレスが等しくなるようなマッピングをここではするだけだから、
その説明もまだ生きてこない。
そういうわけで、一旦ここは初期化のためのコードをひとまず受け入れてもらうことにしよう。
x86のページングに関する詳しい説明は、Rustの世界で本格的なページマッピングを作る際に回すことにする。

\d-code (`
  ###
  # The multiboot entry point
  ###
    (前回と同じなので中略)
    movb $'A', %al
    call _putc_serial
  # Setting up the initial paging
    /* Set PAE */
    movl %cr4, %eax
    orl $1 << 5, %eax            /* PAE */
    movl %eax, %cr4
    movl $0x80000001, %eax       /* implicit argument for cpuid */
    cpuid
    andl $1 << 26, %edx          /* Test if it supports giga byte page */
    jnz 1f
    movl $_nohugepage_msg, %eax
    call _puts_serial
    hlt
    _nohugepage_msg:
    .ascii "\nNo, huge page support. halting..\n\0"
  1:
    /* Make pml4 point to pdp */
    movl $boot_pml4, %ebx
    movl $boot_pdp, %eax
    orl $0x3, %eax              /* Present and RW */
    movl %eax, 0(%ebx)
    xorl %eax, %eax
    movl %eax, 4(%ebx)
    /* Put an indentity-mapping pdp entry */
    movl $boot_pdp, %ebx
    movl $0x83, %eax            /* Present, RW, and Page Size */
    /*   - the 0th entry to map [0, 1G) to [0, 1G) */
    movl %eax, 0(%ebx)
    xorl %eax, %eax
    movl %eax, 4(%ebx)
    /* Set them to cr3 */
    movl $boot_pml4, %eax
    movl %eax, %cr3
  # Enter Long mode
    movl $0xc0000080, %ecx  /* EFER MSR */
    rdmsr
    orl $1 << 8, %eax       /* Set LME */
    wrmsr
    movl %cr0, %eax
    orl $1 << 31, %eax      /* Enable paging */
    movl %eax, %cr0
  # Debug
    movb $'B', %al
    call _putc_serial
`);
\d-code (`
  _puts_serial:
    movl $0x3f8, %edx
    movl %eax, %ebx
  1:
    movb (%ebx), %al
    testb %al, %al
    jz 2f
    outb %al, %dx
    incl %ebx
    jmp 1b
  2:
    ret

  ###
  # Paging Structures
  ###
    .balign  4096
    .globl boot_pml4
  boot_pml4:
    .space 4096, 0
    .globl boot_pdp
  boot_pdp:
    .space 4096, 0
    .globl boot_pd
  boot_pd:
    .space 4096, 0
`);

注意点だけいくつか説明したい。
まず、ページの初期化を簡単にするため、1GBページを使って、ざっくり仮想アドレスの[0, 1G)を、物理アドレスの同じく[0, 1G)の空間へとマッピングした。
実機では、1GBページングの機能はHaswell以降の比較的新しいCPUにしか載っていないため注意してほしい。
また、このときにつかう、ブート時の仮ページング構造体群のアドレスを、\code(`.space`);ディレクティブを使って確保している。
これはELFファイル上でも4096バイトの空間を消費してしまうので、本来なら\code(`.comm`);の方が好ましいのだが、ここを\code(`.comm`);にしていると
なぜかうまくページングが有効化できなくなる。
私はまだこの原因が良く分かっていないので要調査だ。だから、ここでは私を信用せずに、半信半疑の状態で\code(`.space`);を使用してほしい。

}
+p{

さて、ここまでのコードで、私達はCompatibility Longモードへと突入した。
x86_64アーキテクチャで導入されたロングモードだけど、実は2つのサブモードがある。
そのうち一つは、本当の64bitモードだけど、もうひとつはこのCompatibility Longモードなのだ。
この状態では、まだCPUは32bitで動いている。
ここで、64bitロングモード用のGlobal Descriptor Table (GDT)をセットして、現在の32bitコードから64bitコードの領域へとlong jumpを行えば、
本当の64bitモードでCPUが動き出す。
そうすれば、ようやくRustへと処理を渡すことができる。

}
+p{

では、GDTを作っていこう。GDTは、64bitでは、ほとんどその機能が廃止されたセグメントディスクリプタについて設定するための構造体だ。
32bit時代では、セグメントを使って、論理アドレスのオフセットやサイズを制限することができたのだけれど、今ではこの機能はなくなってしまった。
権限など、必要な数少ないビットだけをセットしたら、あとはあまり用はない。
詳しくはIntelのマニュアルを参照してほしい。ここでは、OS Dev Wikiに従ってGDTを初期化する。

\d-code (`
  ###
  # GDT
  ###
    .data
    .align 4096
  _boot_gdt:
    .set _boot_gdt_null, . - _boot_gdt
      /* null */
    .short 0xffff               /* Limit (low) */
    .short 0x0000               /* Base (low) */
    .byte  0x00                 /* Base (middle) */
    .byte  0x00                 /* Access */
    .byte  0x01                 /* Granularity */
    .byte  0x00                 /* Base (high) */
      /* code */
    .set _boot_gdt_code, . - _boot_gdt
    .short 0x0000               /* Limit (low) */
    .short 0x0000               /* Base (low) */
    .byte  0x00                 /* Base (middle) */
    .byte  0b10011010           /* Access; E/R */
    .byte  0b10101111           /* Granularity; 64 bits flag, limit19:16 */
    .byte  0x00                 /* Base (high) */
      /* data */
    .set _boot_gdt_data, . - _boot_gdt
    .short 0x0000               /* Limit (low) */
    .short 0x0000               /* Base (low) */
    .byte  0x00                 /* Base (middle) */
    .byte  0b10010010           /* Access; R/W */
    .byte  0x00                 /* Granularity */
    .byte  0x00                 /* Base (high) */
    .quad 0
  _boot_gdtr:
    .word . - _boot_gdt - 1
    .quad _boot_gdt
`);

}
+p{

そうしたらあとは、このGDTをロードして、64bitで書いたコードの領域へジャンプしよう。
この64bitコード領域が、さらにRustのコードへとジャンプすることになる。

\d-code(`
    movb $'B', %al
    call _putc_serial
  # Load GDT
    movl $_boot_gdtr, %eax
    lgdt (%eax)
      # Debug
    movb $'C', %al
    call _putc_serial
    ljmp $_boot_gdt_code, $jump_to_rust
    hlt

  ###
  # Long mode entry point
  ###
    .section .text
    .globl jmp_to_rust
  .code64
  jump_to_rust:
    cli
    cld
  # Debug
    movb $'D', %al
    call _putc_serial
    hlt
`);

これでロングモードヘ突入だ！
一旦ここで動作を確認してみよう。

\d-code(`
  $ make
  gcc -fno-pic -no-pie -nostdlib -Tsrc/linker.ld -o build/kernel -Wl,-n src/startup.S
  mkdir -p build/isofiles/boot/grub
  (中略)
  ABCD
`);

無事、デバッグ出力が'A'から'D'まで出力されている！
ロングモードへの遷移の成功だ。
残りのやることは、Rustのエントリーポイントへのジャンプだけだ。

}
+p{

だがその前に、久しぶりにRust側の世界にちょっとだけ戻ってこよう。
Rustをアセンブリから呼べるようにするために、ちょっとだけやることがある。
まず、\code(`bootloader`); crateを依存関係から削除する。
いまや、私はMultibootを使ってブートを行っているから、このcrateはもう必要ない。
さらに、crate typeを\code(`staticlib`);に書き換える必要がある。
これにより、cargo xbuildによる出力が\code(`.a`);ファイルになり、自分でリンクを行うのに都合がよくなる。
\code(`Cargo.toml`);を次のように書き換える。

\d-code(`
  +[lib]
  +crate-type = ["staticlib"]
  +
  [dependencies]
  -bootloader = "0.3.12"
`);

さらに、\code(`main.rs`);も次のように修正する。

\d-code(`
   #![no_std]
  -#![no_main]
  (中略)
   #[no_mangle]
  -pub extern "C" fn _start() -> ! {
  +pub extern "C" fn rust_start() -> ! {

`);

この\code(`main.rs`);は、crate typeの変更の影響で、\code(`lib.rs`);にリネームする必要がある。
\d-code(`$ git mv src/main.rs src/lib.rs`);

これで、Rust側のコードを、今まで書いていたコードとリンクし、アセンブリから呼び出す準備が整った。

}
+p{

\code(`startup.S`);を完成させよう！

\d-code(`
  # Debug
    movb $'D', %al
    call _putc_serial
  # Set data segment
    movw $_boot_gdt_data, %ax
    movw %ax, %ds
    movw %ax, %es
    movw %ax, %fs
    movw %ax, %gs
    movw %ax, %ss
  # Fill the screen with blue
    movl $0xB8000, %edi
    movq $0x1F201F201F201F20, %rax
    movl $500, %ecx
    rep stosq
  # Debug
    movb $'E', %al
    call _putc_serial
    movb $'\n', %al
    call _putc_serial
    jmp rust_start
    hlt
`);

ロングモードに入ったあと、dsなどのデータ用セグメントレジスタを先ほど初期化したGDTに設定していく。
\code(`cs`);レジスタに関しては、ここに飛んでくるlong jumpで設定されている。
そうしたらあとは\code(`rust_start`);へとジャンプするだけなのだが、前回の画面と変わりがないのも悲しいので、画面を青く塗りつぶしてみた。
これで\code(`startup.S`);は完成だ！

}
+p{

これですべておしまい、と言いたいところなんだけど、かなり大事なステップが残っている。
Rustのオブジェクトをリンクして、ブータブルイメージを作らなければいけない。
そこで、Makefileを次のように変更しよう。

\d-code(`
  build/kernel: build/startup | build/
    cargo xbuild --target x86_64-rusty_l4.json  # - (1)
    cp target/x86_64-rusty_l4/debug/librusty_l4.a build/
    ld -n -Tsrc/linker.ld -o build/kernel-nonstripped build/startup build/librusty_l4.a # - (2)
    objcopy -g build/kernel-nonstripped build/kernel # - (3)

  build/startup: src/linker.ld src/startup.S | build/
    gcc -c -fno-pic -no-pie -nostdlib -Tlinker.ld -o build/startup -Wl,-n src/startup.S 

  (中略)
  .PHONY: run all clean build/kernel
`);

さきほどと比べると、\code(`startup.S`);のビルドが分離し、\code(`(1)`);に\code(`cargo xbuild`);によるビルドが追加されている。
気を付けてほしいのは\code(`(2)`);、\code(`(3)`);の部分だ。\code(`(2)`);でリンクをしたあと、\code(`(3)`);で少し奇妙なことをしている。
リンクが終わった後、\code(`kernel-nonstripped`);ではRust由来のメタデータがELFファイル上でマルチブートヘッダより前方に位置してしまい、
grubがマルチブートヘッダを見つけられなくなってしまう。
そこで\code(`(3)`);のようにメタデータをstripすることで、この問題を解決している。
これは、根本的にはマルチブートヘッダのELFファイル上での配置を実装依存の挙動に任せていることが問題だ。
前に言ったように、これは後日なんらかの方法で改善したいと思っている。
Garasubo氏が開発している、erkosという素晴らしいRust製の組み込みOSがある。\cite[`erkos`];
これのコードベースを参考にさせてらったところ、cargoに直接リンカスクリプトを渡すこともできるようだ。
これを利用してcargoの出力するバイナリのセクション配置を制御することもできるだろうし、やはりマルチブートヘッダバイナリを単にバイナリ先頭にリンクすることもできるだろう。
これは後日の課題にしよう。

}
+p{

なにはともあれ、これですべての準備が整った。
makeして実行しよう！
前号からコードを手元で書いてくださっている方ではない、今回からgit cloneして試してみた、という方は、
おそらく\code(`cargo xbuild`);のインストールが終わっていないだろう。
インストールしたのち、さらにRust L4のビルドがnightlyで行われるようcargoを設定してほしい。

\d-code(`
  $ cargo install cargo-xbuild
  $ rustup override add nightly
`);

では、makeしよう！

\d-code(`
  $ make
  cargo xbuild --target x86_64-rusty_l4.json
  (中略)
  ABCDE
`);
\figure ?:(`fig:runmulti`)
  {Multiboot2を使ってブートに成功した。図1と変化を出すため、背景を青く塗りつぶした。}
  <+image-frame{\insert-image(14cm)(`pohe/figures/hello_mutiboot2.JPG`);}>

出力はこのようになるだろう。そして、\ref-figure(`fig:runmulti`);のような画面が描画される！
Philippの高級なcrateを使ってブートした時と同じHello, World(をちょっとカラフルにしたもの)が無事表示できた。
これで、2nd DayのRusty L4の最小カーネルは今度こそ完成だ!


}

>  % subsubsection

+subsubsection{2nd Day: Summary} <

+p{

二日目のRustで最小のカーネルを書いてみる章は、前号と今号にまたがった記事となってしまった。
前号の前半では、Rust でのベアメタルプログラミングの世界を体験することが、大きな比重を占めた。
最終的には、Qemuの画面上に、"Hello, World!"を表示するわけなんだけど、
この際、ベアメタルプログラミングをしているにもかかわらず、crateを使って簡単にブートができてしまったり、
println!マクロが使えるまであっという間だったりと、その生産性の高さは本当に驚異的だった。
モダンで高級な言語機能を普通に使えるのも、やはりうれしかった。
これは、OSをC++で書いてみようという試みが目指しているものに近い何かを感じてしまう。
もっとも、ベアメタルという観点では、C++よりももっとお手軽に使えてしまえたけれど！
Rustはカーネル開発をもっと簡単に、そして楽しくしてくれそうだというのは間違いない。

}
+p{

今号の後半では、Multiboot2を使ってRust製カーネルのブートを行った。
ほとんどがいつものブートプロセスなので、難しいところはなかったけれど、
Rustはスタックが深くなるという点と、リンク周りの情報がまだC言語ほどはそろっていないという点は注意したい。
この周りは少し、手探りで進む感じになるだろう。
でも、これはきっとすぐに時間が解決してくれるだろう。Rustでベアメタル開発を行っている人は少なくないはずだ。

}
+p{

以上で、"Writing a (micro)kernel in Rust in 12 days"の2nd dayは終了だ。
次なる3日目では、一旦Rustの世界からもベアメタルプログラムの世界からも離れ、L4の世界に入ることになる。
4日目でRusty L4上で動かすための、L4Ka::Pistachio用のサーバーを作るのだ。
VGA のメモリ領域をたたいて、 Hello, World! と表示させるだけのサーバーから始めるつもりだ。
次回のYabaitech.Tokyoで連載する（はず）だから、そのときにまたお会いしよう！

}

>  % subsubsection

>  % subsection

>  % section

> % chapter

>  % article

end
