@require: itemize
@import: local

let automata = '<+section{準備 ― 形式言語とオートマトン} <
    +dialog(
        [(Some({魔王}), {駄目じゃないか!そんな変なもの食べちゃ!});
         (Some({猫}), {「俺に有限文字列を食えと言ったのはエミリーだ。});
         (Some({猫}), {「そして俺は正規言語の味に目覚めた。});
         (Some({魔王}),{「駄目! 絶対、駄目!});
         (Some({魔王}), {「猫は!});
         (Some({魔王}), {「キャットフード食べないと!});
         (Some({魔王}), {「駄目でしょぉぉぉぉぉぉぉぉぉぉぉぉ!});
         (Some({猫}), {「俺が正しいか貴様が正しいか… });
         (Some({猫}), {「決着を付ける必要があるようだな！});
         (Some({魔王}), {「望むところだぁぁぁぁぁぁぁぁぁぁぁぁぁ！});
         (Some({猫}), {「では行くぞぉぉぉぉぉぉぉぉぉぉぉぉ！});
         (Some({猫}), {「決戦のバトル・フィールドへ！})]
    );

+p {
  本章では有限集合${\alphabet}を\emph{文字}の集合として用います。例えば電話番号の様な数字の列を考える場合、${\alphabet}としてアラビア数字の集合${\set{0,1,2,3,4,5,6,7,8,9}}を用います。文字の有限列を\emph{文字列}と定義します。文字列${w,w'}を結合するときには演算子${\cdot}を用いて${w\cdot w'}と表記します。
例えば文字の集合${\alphabet}が${\alphabet=\set{\text!{K,B,F}}}のとき、${\text!{KBF}}や
${\text!{BBKKBKK}}などは文字列となります。これらを結合した${\text!{KBF}\cdot \text!{BBKKBKK}}、つまり
${\text!{KBFBBKKBKK}}も文字列です。また、長さ0の特別な文字列として${\epsilon}を用います。任意の文字列${w}について${\epsilon}は${w\cdot\epsilon=\epsilon\cdot w=w}の性質が成り立ちます。
以後長さ${n}の文字列${a_1a_2\cdots a_n}の集合を${\alphabet^n}、有限長についての集合和を${\alphabet^\ast=\bigcup_{i=0}^{\infty}\alphabet^n}と書きます。また、文字の集合として以後主に${\alphabet = \set{\text!{K,B,F}}}を用います。
}
+p {
  文字列の集合を\emph{言語}と言います。例えば文字の集合${\alphabet}が${\alphabet=\set{0,1,2,3,4,5,6,7,8,9}}のときに${\alphabet^\ast}の部分集合である、3桁の電話番号の集合やフリーダイアルの電話番号の集合などは言語の例です。偶数の集合や回文となっている文字列の集合も言語の例です。
}
+p {
  \figure ?:(`fig:mustHaveKBF`){NFAの例${\A}。"KBF"という部分列を含む文字列を受理する。}<
     +image-frame{\insert-pdf-image(7cm)(path-to-root ^ `figs/mustHaveKBF.pdf`)(1);}
  >

  \emph{非決定的有限オートマトン} (Nondeterministic Finite Automata, NFA)は、様々な言語の中でも\emph{正規言語}と呼ばれる言語を表現する方法の中の一つです。NFAは例えば\ref-figure(`fig:mustHaveKBF`);にある、${\A}のような状態遷移図を用いて表されます。
NFA${\A}が表現する言語を${\Lgof{\A}}と表記することとし、文字列${\word\in\Word}が${\Lgof{\A}}に含まれるとき、${\A}が${\word}を\emph{受理する}と言います。
\ref-figure(`fig:mustHaveKBF`);にあるNFA${\A}は、文字集合${\set{\text!{K,B,F}}}の上で定義されたNFAで、「KBFという部分列が存在する文字列」を受理します。
このNFAには状態が${q_0,q_1,q_2,,q_3}の4つありますがその中に特別な役割をする状態が二種類あります。
一つ目は\emph{初期状態}と呼ばれる状態です。
本章では初期状態は"start"と書かれた矢印で外から指すことで表すこととします。
今回の初期状態は${q_0}のみですが、複数存在しても構いません。
二つ目は\emph{受理状態}と呼ばれる状態です。
本章では受理状態は二重丸で表すこととします。今回の初期状態は${q_2}ですが、こちらも複数存在しても構いません。
}
+p {
  例として${\mathcal{A}}が文字列${w=\text!{KKBF}}を受理する様子を見ていきます。
  NFAではまず始めに初期状態${q_0}にいるところから始めて、一文字ずつ文字を読んでいき、それに従って次の状態に進んでいきます。
  まず始めに一文字目のKを読みます。このとき、${q_0}が始点でKのラベルが付いている辺の終点は${q_0}と${q_1}の二つがあるので、次の状態は${q_0}及び${q_1}となります。
  同様に二文字目のKを読むと、${q_0}が始点でKのラベルが付いている辺の終点は${q_0}及び${q_1}で、${q_1}が始点でKのラベルが付いている辺は存在しないので、次の状態も${q_0}と${q_1}となります。
  更に三文字目のBを読むと、${q_0}が始点でBのラベルが付いている辺の終点は${q_0}で、${q_1}が始点でBのラベルが付いている辺の終点は${q_2}なので、次の状態は${q_0}と${q_2}となります。
  最後に四文字目のFを読むと、${q_0}が始点でFのラベルが付いている辺の終点は${q_0}で、${q_2}が始点でFのラベルが付いている辺の終点は${q_3}なので、最後の状態は${q_0}と${q_3}となります。
全ての文字を読み込んだ後で、現在居る状態に受理状態が存在するかどうかを調べます。
今回の最後にいる状態のうち、${q_3}は二重丸の付いている受理状態なので、NFA${\mathcal{A}}は${w=\text!{KKBF}}を受理する、ということがわかります。
同様の手順を踏むことで、任意の文字列${w'\in\set{\text!{K,B,F}}^\ast}について${\mathcal{A}}が${w'}を受理するかどうかを調べることができます。
}
+p {
  NFAの形式的な定義は以下の様になります。
}
+definition ?:({非決定的有限オートマトン}) ?:(`def:NFA`)
{
  文字集合${\alphabet}上の非決定的有限オートマトン${\A}は5つ組${\paren{\alphabet,\Loc,\InitLoc,\AccLoc,\Transition}}である。但し${\alphabet}は有限の文字集合、${\Loc}は有限の状態集合、${\InitLoc \subseteq \Loc}は初期状態、${\AccLoc \subseteq \Loc}は受理状態の集合、${\Transition\subseteq \Loc \times\alphabet\times \Loc}は状態遷移関係である。
}
+p {
  文字列 ${\wordWithInside \in \Word} に対して、ある状態列${\loc_0,\loc_1,\ldots,\loc_n}で、${\loc_0 \in \InitLoc}、${\paren{\loc_i,a_i,\loc_{i + 1}} \in \Transition}、${q_n\in F}が成り立つものが存在するとき、${\A}は${\word}を\emph{受理する}という。
また、${\A}が受理する文字列の集合を${\A}の\emph{受理言語}といい、${\Lgof{\A}}と表記する。
また、NFA${\A}が言語${\Lgof{\A}}を\emph{認識する}、という。
NFAによって受理される言語を\emph{正規言語} (regular language)という。
また、${\InitLoc}が単集合で、各${\loc \in\Loc}、${a \in \alphabet}について${\paren{\loc,a,\loc'}}を充たす${\loc' \in \Loc}が一意に定まるとき、${\A}が\emph{決定的である}という。決定的である有限オートマトンを\emph{決定的有限オートマトン (deterministic finite automaton, DFA)}と言う。
  kokokara!!
}
>>
