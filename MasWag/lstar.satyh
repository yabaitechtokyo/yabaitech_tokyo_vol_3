@require: itemize
@import: local

let lstar = '<+section?:(`sec:lstar`){L\*アルゴリズム} <
            +dialog(
                [(None,{突然、指名手配中の殺人鬼が現れた!});
                 (Some({殺人鬼}), {「ぶっぽるぎゃるぴるぎゃっぽっぱぁぁぁぁぁーっ!});
                 (None,{殺人鬼は奇声を上げて…});
                 (None,{　});
                 (None,{　          });
                 (None,{　          });
                 (None,{Angluin 1987年 L\*を振り上げた!});
                 (None,{そして殺人鬼はジャンプして思いっきりそれを…});
                 (None,{　});
                 (None,{　          });
                 (None,{　          });
                 (None,{振り下ろした!});]);
+p {
  前節で説明したIDアルゴリズムは正規言語${\Lg}を、live-completeな文字列集合${P}と所属性神託を用いて学習します。
  IDアルゴリズムは${P}がlive-completeであることを要請しますが、
  一方でIDアルゴリズムは${P}が大きくなると観察表が大きくなり必要な所属性神託の回数が増大するので、${P}を必要以上に大きくするのは良くありません。
  本節ではlive-completeな文字列集合${P}を実行時に生成するL\*アルゴリズム\cite([`journals/iandc/Angluin87`]);を説明します。
  L\*アルゴリズムは次の二つの質問を神託に聞くことを通して学習を行ないます。
  現実的にこんなことがわかる神託をどうやって用意するのか、という問題はここでは考えません。
}
+p{
\listing{
* 所属性質問 (membership query): 文字列 ${\word \in \Word} を神託に与えて、${\word} が学習したい言語 ${\Lg\subseteq \Word} に含まれているか (${\word \in \Lg})を問う質問。
* 等価性質問 (equivalence query): DFA ${\A} を神託に与えて、${\Lgof{\A}} が学習したい言語 ${\Lg} と等しいかどうかを問う質問。${\Lgof{\A}\neq \Lg}である場合には反例 ${\word\in \Word}、つまり ${\word\in \Lgof{\A} \triangle \Lg} を充たす最短の文字列 ${\word} が返る。ここで${\triangle}は集合の対称差の記号である。
}
}
+p {
観察表が以下の条件を充たすとき、その観察表を\emph{閉じている (closed)}と言います。
\listing{
* 各${w'\in P'}について、${T\[w,\text!{-}\]=T\[w',\text!{-}\]}を充たす${w\in P}が存在する
* 各${w'\in P}、${a\in\alphabet}について、${w\cdot a\in P\cup P'}が成り立つ
}
}
+p {
  \figure ?:(`fig:LStarObservationTable1`){一番始めの観察表(左)と所属性神託を使って内容を埋めた観察表(右)}<
  +centering{\observationTable(
    [[{} ;{${\epsilon}} ;];
     [{${\epsilon}};];
     [{—————};{—————};];]);
\observationTable(
    [[{} ;{${\epsilon}} ;];
     [{${\epsilon}};{-};];
     [{—————};{—————};];
     [{K};{-};];
     [{B};{-};];
     [{F};{-};];]);
 }
>
}
+subsection{L\* アルゴリズム} <
+p {
   本節も例として、 \ref-figure(`fig:mustHaveKBF`);のNFAが認識する${\Lg = \setsep{ a \in \set{\text!{K,B,F}}}{\text!{KBF を部分文字列として含む}}} を用います。
}
+p{
  L\*アルゴリズムではまず始めに\ref-figure(`fig:LStarObservationTable1`);左の観察表から始めます。最初に空欄になっているセル${T\[\epsilon, \epsilon\]}を所属性質問を用いて埋め、同時に${P'}にK,B,Fを追加し、同様に埋めます (\ref-figure(`fig:LStarObservationTable1`);右) 。
}
+p {
  ここで\ref-figure(`fig:LStarObservationTable1`);右の観察表が閉じているかを判定します。
  今回は任意の${w\in P'}について、${T\[w,\text!{-}\]=T\[\epsilon,\text!{-}\]}が成り立ちますし、各${a\in\alphabet}について、${a\in P'}が成り立つので観察表は閉じています。
  観察表が閉じている場合、IDアルゴリズムのときと同様に観察表からDFAを生成します。
  \figure ?:(`fig:KBFStep1`){\ref-figure(`fig:LStarObservationTable1`);右の観察表に対応するDFA ${\A_1}}<
     +image-frame{\insert-pdf-image(5cm)(path-to-root ^ `figs/KBFStep1.pdf`)(1);}
  >
  \ref-figure(`fig:LStarObservationTable1`);右の観察表からは\ref-figure(`fig:KBFStep1`);のDFA、${\A_1}が生成されます。
}
+p {
  \figure ?:(`fig:LStarObservationTable2`){K、KB、KBFを${P}に追加した観察表}<
+centering{
  \observationTable(
    [[{} ;{${\epsilon}} ;];
     [{${\epsilon}};{-};];
     [{K};{-};];
     [{KB};{-};];
     [{KBF};{+};];
     [{—————};{—————};];
     [{B};{-};];
     [{F};{-};];]);
}
>
DFA ${\A_1}を生成することができたので等価性質問によって、DFA ${\A_1}が学習したい正規言語を認識するかどうかを調べてみます。
今回、DFA ${\mathcal{A}_1}は言語${\Lg}を認識しないので、最短の反例 KBF が返ります。
ここで、${P}にKBFのprefixで${P}に含まれていないものを追加します。
KBFのprefixは${\epsilon}、K、KB、KBFなので、今回は${P}にKとKBとKBFを追加し、観察表を埋めます。 (\ref-figure(`fig:LStarObservationTable2`);)
}
+p {
  \figure ?:(`fig:LStarObservationTable3`){\ref-figure(`fig:LStarObservationTable2`);の観察表を閉じさせた観察表 (左)、及び更に一貫するまで${S}に文字列を追加した観察表 (右)}<
+left-right{
  \observationTable(
    [[{} ;{${\epsilon}} ;];
     [{${\epsilon}};{-};];
     [{K};{-};];
     [{KB};{-};];
     [{KBF};{+};];
     [{—————};{—————};];
     [{B};{-};];
     [{F};{-};];
     [{KK};{-};];
     [{KF};{-};];
     [{KBK};{-};];
     [{KBB};{-};];
     [{KBFK};{+};];
     [{KBFB};{+};];
     [{KBFF};{+};];]);}{
  \observationTable(
    [[{} ;{${\epsilon}} ;{F};{BF};];
     [{${\epsilon}};{-};{-};{-};];
     [{K};{-};{-};{+};];
     [{KB};{-};{+};{-};];
     [{KBF};{+};{+};{+};];
     [{—————};{—————};{—————};{—————};];
     [{B};{-};{-};{-};];
     [{F};{-};{-};{-};];
     [{KK};{-};{-};{+};];
     [{KF};{-};{-};{-};];
     [{KBK};{-};{-};{+};];
     [{KBB};{-};{-};{-};];
     [{KBFK};{+};{+};{+};];
     [{KBFB};{+};{+};{+};];
     [{KBFF};{+};{+};{+};];]);
}
>
%      page-break page pagecontf pagepartsf (bb-toc +++ bb-main)        
  \ref-figure(`fig:LStarObservationTable2`);の観察表は閉じていないので、\ref-figure(`fig:LStarObservationTable2`);の観察表が閉じるまで${P}及び${P'}に文字列を追加し、観察表を埋めます。 (\ref-figure(`fig:LStarObservationTable3`);左)
  具体的には${\text!{K},\text!{KB}\text!{KBF} \in P}ですがこれらの一文字加えた文字のうち、KK、KF、KBK、KBB、KBFK、KBFB、KBFFが${P}にも${P'}にも含まれていないので、これらを${P'}に追加します。
}
+p {
   次に\ref-figure(`fig:LStarObservationTable3`);左の観察表が一貫するまで${S}に文字列を追加します (\ref-figure(`fig:LStarObservationTable3`);右)。
   観察表を一貫させる操作はIDアルゴリズムのものと同じです。
   今回はここで観察表が閉じかつ一貫しましたが、一般には一度の操作で観察表が閉じかつ一貫するとは限りません。
   その場合、観察表が閉じかつ一貫するまで${P'}や${S}に繰り返し文字列を追加します。
}
+p {
  \figure ?:(`fig:evenDFAStep2`){\ref-figure(`fig:LStarObservationTable3`);右の観察表に対応するDFA ${\A_2}} <
     +image-frame{\insert-pdf-image(7cm)(path-to-root ^ `figs/mustHaveKBFDFA.pdf`)(1);}
  >
  最後に\ref-figure(`fig:LStarObservationTable3`);左の観察表に対応するDFA ${\A_2}を生成し、等価性質問によって${\Lgof{\A_2}}と学習したい正規言語が一致するかどうかを調べます。
  今回は${\Lgof{\A_2}}が学習したい正規言語と一致するので、L\*アルゴリズムはここで終了となります。
}
>
+subsection{停止性} <
+p {
  さて、Myhill-Nerodeの定理の立場からL\*アルゴリズムの観察表を見ていきます。
まず、行ベクトル${T\[\word,\text!{-}\]}が互いに異なるような${\word,\word' \in P}については、適宜末尾に文字列を加えたときの受理/非受理の関係が異なるので、${P / \oapprox_{T}}の要素数は${\Word/\MNRel{\Lg}}の要素数以下になり、${\Lg}が正規言語であるならば上限が存在します
(${\oapprox_{T}}の定義は\ref-section(`sec:id`);を参照)。
${P}に文字列を追加して観察表を閉じさせる操作を行うとき、任意の${\word \in P} について ${T\[\word' a,\text!{-}\] \neq} ${T\[\word,\text!{-}\]}を充たすような ${\word' a} (但し${\word' \in P, a \in \alphabet}) を${P}に追加するので、
${P / \oapprox_{T}}の要素数は1増加します。
観察表が一貫していないとき、${S}に要素を追加して、つまり${\oapprox_{T}}の定義を厳しくすることで
任意の${\word,\word' \in P, a \in \alphabet} について ${T\[\word,\text!{-}\] = T\[\word',\text!{-}\]}ならば${T\[\word a ,\text!{-}\] = T\[\word' a ,\text!{-}\]}を充たすようにするので、
${P / \oapprox_{T}}の要素数は少なくとも1増加します。
従って${\Lg}が正規言語であるとき、観察表を閉じるまたは一貫させる操作は有限回しか行われないことがわかります。
また、等価性質問によって反例が返された後には少くとも一回以上${P}に文字列を追加して観察表を閉じさせる、または観察表を一貫させる操作を行うので、等価性質問も有限回しか行われません。
${P'}に文字列を追加して観察表を閉じさせる操作を行うのは等価性質問によって反例が返されたとき、または${P}に文字列を追加して観察表を一貫させる操作を行った後なので、これも有限回しか行われません。
以上より、${\Lg}が正規言語であるときL\*アルゴリズムが常に停止することがわかります。
}
+p{
また、L\*アルゴリズムが生成するDFAの状態数は${\abs{P / \oapprox_{T}}} ですが、${L\paren{\A}=L}を充たす任意のDFAの状態数は${\Word/\MNRel{\Lg}}以上であることから、${\A}は${\Lgof{\A}=\Lg}を充たす状態数が最小のDFAであることもわかります。
}
>
>>
