@import: ../book-class
@require: deco
@require: hdecoset
@import: maswag-math

let path-to-root = `MasWag/`

let-inline ctx \sample-command it =
  read-inline (ctx |> set-text-color Color.red) it

let-math \mathit m = ${\math-style!(MathItalic){#m}}

%%% Word
let-math \alphabet = ${\mathrm{\Sigma}}
let-math \word = ${w}
let-math \Word = ${\alphabet^\ast}
let-math \wordInside = ${a_1a_2\cdots a_n}
let-math \wordWithInside = ${\word = \wordInside}

%%% Autom
let-math \A = ${\mathcal{A}}
let-math \Lg = ${L}
let-math \Lgof a = ${\Lg\paren{#a}}
let-math \Loc = ${Q}
let-math \loc = ${q}
let-math \InitLoc = ${Q_0}
let-math \AccLoc = ${Q_F}
let-math \Transition = ${\mathrm{\Delta}}

%%% Myhill-Nerode
let-math \MNRel l = ${R_{#l}}

%%% Math
let-math \sequence x = ${\paren{#x}^\ast}
let-math \powerset set = ${\app{\mathcal{P}}{#set}}
let-math \bowtie = ${\Join}
let-math \colon = ${:}
let-math \iff = ${\Leftrightarrow}
let-math \Z = ${\mathbb{Z}}
let-math \Zp = ${\Z_{>0}}
let-math \Znn = ${\mathbb{N}}
let-math \R = ${\mathbb{R}}
let-math \Rp = ${\mathbb{R}_{> 0}}
let-math \Rnn = ${\mathbb{R}_{\geq 0}}
let-math \duration = ${t}
let-math \models = ${\vDash}
let-math \nmodels = ${\nvDash}
let-math \equivClass elem rel = ${\sqbracket{#elem}_{#rel}}

let-inline ctx \simple-frame it =
  let pads = (2pt, 2pt, 2pt, 2pt) in
  let decos = HDecoSet.simple-frame-stroke 1pt (Gray(0.5)) in
    inline-frame-breakable pads decos (read-inline ctx it)

let-block ctx +frame content =
  let pads = (10pt, 10pt, 10pt, 10pt) in
  let decoset = VDecoSet.simple-frame-stroke 1pt (Color.gray 0.75) in
    block-frame-breakable ctx pads decoset (fun ctx -> read-block ctx content)

let-block ctx +centering it =
  line-break true true ctx (inline-fil ++ read-inline ctx it ++ inline-fil)

let-inline ctx \centering it =
  inline-fil ++ (read-inline ctx it) ++ inline-fil

let-block ctx +image-frame content =
  let pads = (10pt, 10pt, 10pt, 10pt) in
    block-frame-breakable ctx pads VDecoSet.empty (fun ctx -> read-block ctx '<+centering{#content;}>)

let-block ctx +image-frame-with-line content =
  let pads = (10pt, 10pt, 10pt, 10pt) in
  let decoset = VDecoSet.simple-frame-stroke 1pt Color.black in          
    block-frame-breakable ctx pads decoset (fun ctx -> read-block ctx '<+centering{#content;}>)

let-block ctx +myexample ?:labelopt it =
  let pads = (15pt, 15pt, 0pt, 0pt) in
  let decoset = VDecoSet.simple-frame-stroke 1pt (Gray(0.75)) in
  let bt =
    match labelopt with
    | None        -> '<+Book.example{#it;}>
    | Some(label) -> '<+Book.example?*?:(label){#it;}>
  in
    block-frame-breakable ctx pads decoset (fun ctx ->
      block-skip 0pt
        +++ read-block ctx bt
        +++ line-break false true (ctx |> set-paragraph-margin 0pt 0pt) inline-fil
    )

let-block ctx +dialog input =
  let pads = (5pt, 5pt, 0pt, 0pt) in
  let decoset = VDecoSet.simple-frame-stroke 1pt (Gray(0.75)) in
    block-frame-breakable ctx pads decoset (fun ctx ->
       (List.fold-left (+++) (block-skip 0pt)
              (List.map (fun (nameOpt, content) -> (
                 let ctx-name = ctx
                     |> set-paragraph-margin 3pt 3pt
                     |> set-font HanIdeographic (`ipaexg`, 1.0, 0.)
                     |> set-font Kana (`ipaexg`, 1.0, 0.) in 
                 line-break true true ctx-name (
                 match nameOpt with
                 | None -> read-inline (ctx |> set-paragraph-margin 3pt 3pt) {#content;}
                 | Some(name) ->  ((read-inline ctx-name {#name;}) ++
                                      (read-inline ctx {: #content;})))
               )) input
              ))
        +++ line-break false true (ctx |> set-paragraph-margin 0pt 0pt) inline-fil
    )

let-block ctx +problem title input output =
  let pads = (5pt, 5pt, 0pt, 0pt) in
  let decoset = VDecoSet.simple-frame-stroke 1pt (Gray(0.75)) in
    block-frame-breakable ctx pads decoset (fun ctx ->
        block-skip 0pt
        +++ (let ctx-title = ctx
                     |> set-font HanIdeographic (`ipaexg`, 1.0, 0.)
                     |> set-font Kana (`ipaexg`, 1.0, 0.) in 
                line-break false false ctx-title (read-inline ctx-title {\simple-frame{#title;}}))
        +++ read-block ctx '<
                +p{\emph{入力}: #input;}
                +p{\emph{出力}: #output;}
        >
        +++ line-break false true (ctx |> set-paragraph-margin 0pt 0pt) inline-fil
    )

let-block ctx +problem-nospace title input output =
  let pads = (5pt, 5pt, 0pt, 0pt) in
  let decoset = VDecoSet.simple-frame-stroke 1pt (Gray(0.75)) in
    block-frame-breakable ctx pads decoset (fun ctx ->
        block-skip 0pt
        +++ (let ctx-title = ctx
                     |> set-font HanIdeographic (`ipaexg`, 1.0, 0.)
                     |> set-font Kana (`ipaexg`, 1.0, 0.) in 
                line-break false false ctx-title (read-inline ctx-title {\simple-frame{#title;}}))
        +++ (line-break false false ctx
                ((read-inline ctx {\emph{入力}: #input;\emph{出力}: #output;}) ++ inline-fil))
        +++ line-break false true (ctx |> set-paragraph-margin 0pt 0pt) inline-fil
    )

let-inline ctx \insert-image w path =
  let img = load-image path in
    use-image-by-width img w

let-inline ctx \insert-pdf-image w path page =
  let img = load-pdf-image path page in
    use-image-by-width img w

let-inline ctx \skip length =
    inline-skip length
let-inline ctx \promote-linebreak ib0 ib1 ib2 =
    discretionary (0-100000) (read-inline ctx ib0) (read-inline ctx ib1) (read-inline ctx ib2)
let-inline ctx \promote-linebreak =
    discretionary (0-100000) inline-nil inline-nil inline-nil
let-math \lb-math = text-in-math MathOrd (fun ctx -> read-inline ctx {\promote-linebreak;})

%%% ここで引数を受け取ることはできないか?
let-math \fill-math = text-in-math MathOrd (fun _ -> inline-skip 315pt)

let-inline ctx \hspace w = inline-skip w

let-inline ctx \fill = inline-fil

%% これは良くないが無理やり改段落を挿入する
let-inline ctx \par = 
    let font-ratio-cjk = 0.88 in
    let len = get-font-size ctx *' font-ratio-cjk in
    inline-fil ++ (discretionary (0-100000) inline-nil inline-nil inline-nil) ++ inline-skip len

let font-ratio-latin = 1.
let font-ratio-cjk = 0.88

let-block ctx +acknowledgement inner =
    let len = get-font-size ctx *' font-ratio-cjk in
    let ctx-title = ctx 
                  |> set-paragraph-margin 3pt 3pt
                  |> set-font HanIdeographic (`ipaexg`, 1.0, 0.)
                  |> set-font Kana (`ipaexg`, 1.0, 0.) in 
    let ib-inner = inline-skip len ++ read-inline ctx-title {謝辞} ++ inline-skip len ++ read-inline ctx inner ++ inline-fil in
      form-paragraph ctx ib-inner

let-inline ctx \observationTable content = read-inline ctx {\tabular(fun t -> 
             (let (cellf, multif, empty) = (t#c, t#m, t#e) in
               List.map (fun row -> List.map cellf row) content))(fun xs ys -> (
              match (ys, List.reverse ys) with
              | (y0 :: y1 :: _, ylast :: _) ->
                  ( match (xs, List.reverse xs) with
                    | (x0 :: x1 :: _, xlast :: _) ->
                        let grlstY =
                          [y0; ylast] |> List.map (fun y ->
                            stroke 1pt Color.black (Gr.line (x0, y) (xlast, y)))
                        in
                        (stroke 0.5pt Color.black (Gr.line (x1, y0) (x1, ylast)))
                          :: (stroke 0.5pt Color.black (Gr.line (x0, y1) (xlast, y1))) :: grlstY
                    | _ -> []
                  )
              | _ -> []
          ));}
% let-math \QED = math-char MathOrd `∎`

% let-block ctx +proof-block ?:wordopt inner =
%   let ib-heading =
%     let set-latin-font font ctx =
%         ctx |> set-font Latin font in
%     let font-ratio-latin = 1. in
%     let font-latin-italic = (`Junicode-it`, font-ratio-latin, 0.) in
%     let ctx = ctx |> set-latin-font font-latin-italic in
%       match wordopt with
%       | None    -> read-inline ctx {Proof.}
%       | Some(w) -> read-inline ctx {Proof of #w;.}
%   in
%   let ib-box = read-inline ctx {${\QED}} in
%     line-break true true ctx
%       (ib-heading ++ inline-skip (get-font-size ctx) ++ read-block ctx inner ++ inline-fil ++ ib-box)