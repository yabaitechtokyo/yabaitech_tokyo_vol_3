@require: math
@import: ../book-class
@import: ../lib/typeset/derive

module Zpt : sig
  val article : block-text
end = struct

let-math \neg = math-char MathPrefix `¬`
let-math \lneg = math-char MathPrefix `∼`

let-math \iff = text-in-math MathRel (fun ctx -> inline-skip 5pt ++ read-inline ctx {iff} ++ inline-skip 5pt)
let-math \and = text-in-math MathRel (fun ctx -> inline-skip 5pt ++ read-inline ctx {and} ++ inline-skip 5pt)
let-math \or = text-in-math MathRel (fun ctx -> inline-skip 5pt ++ read-inline ctx {or} ++ inline-skip 5pt)
let-math \void = text-in-math MathOrd (fun ctx -> inline-nil)
let-math \tilde = ${\rightarrow}
let-math \ntilde = ${\nrightarrow}
let-math \L = text-in-math MathPrefix (fun ctx -> read-inline ctx {\emph{L}})

let-math \oarr obj = math-upper obj ${\rightarrow}

let-math \seq ant suc = ${#ant \vdash #suc}
let-math \biseq ant-true ant-false suc-true suc-false =
    ${#ant-true : #ant-false \vdash #suc-true : #suc-false }
let-math \nbiseq ant-true ant-false suc-true suc-false =
    ${#ant-true : #ant-false \nvdash #suc-true : #suc-false }

let-inline ctx \todo inner =
  let ctx-todo = ctx |> set-text-color Color.red in
  read-inline ctx-todo {[TODO: #inner;]}

let-inline ctx \quote inner =
    let font-ratio-cjk = 0.88 in
    let len = ((get-font-size ctx) *' font-ratio-cjk) *' 4. in
    let ib-inner = inline-skip len ++ read-inline ctx inner ++ inline-fil in
    let paragraph = form-paragraph ctx ib-inner in
    inline-fil ++ embed-block-breakable ctx paragraph

let bibliography = [
    (`LogicVSI`, Book(|
        author = {| Graham Priest |};
        title = {Logic: A Very Short Introduction};
        publisher = {Oxford University Press};
        year = 2017
    |));
    (`IntroNC`, Book(|
        author = {| Graham Priest |};
        title = {An Introduction to Non-Classical Logic: From If to Is};
        publisher = {Cambridge University Press};
        year = 2008
    |));
    (`Belnap77`, Article(|
        author = {| Nuel Belnap|};
        title = {A Useful Four-Valued Logic};
        journal = {Modern Uses of Multiple-Valued Logic};
        volume = Some(2);
        number = None;
        pages = (5, 37);
        year = 1977;
    |));
    (`Bochman98`, Article(|
        author = {| Alexander Bochman|};
        title = {Biconsequence Relations: A Four-Valued Formalism of Reasoning with Inconsistency and Incompleteness};
        journal = {Notre Dame Journal of Formal Logic};
        volume = Some(39);
        number = Some({1});
        pages = (47, 73);
        year = 1998;
    |));
    ]

let article =
    open Derive in
    '<
    +chapter ?:(`zpt-article`)
    (|
        bibliography = bibliography;
        title = {真矛盾主義入門};
        author = {zeptometer};
    |)
    <
        +p{今回の記事は割と純粋に論理学系の記事なんだ。テックのテの字もないけどvol.1からそうだった気がするしあまり気にしないでくれよな。}

        +section {序文} <
            +p{「矛盾」という言葉が中国の古典から来ていることはよく知られていますよね。「この盾はどんな攻撃も防ぐぞ」「この矛は全てのものを貫くんだ」なんて調子のいいことをぬかしていた商人が「じゃあその矛でその盾を突いたらどうなるんだ」と真っ当な指摘をされて何も言えなくなってしまったという話です。}
            +p{この話でもそうなのですが、思考や議論に矛盾を生じることを我々はよしとしません。結論が矛盾しているならそれを導く過程や前提のどこかが間違っていると考えるのです。矛盾があってはならないという考えは論理体系の形式化においても最も基本的なアイデアの一つになっています。}
            +p{しかしながらこの無矛盾の原則が必ずしも成り立たないと考える人たちがいます。彼らによると矛盾の中には「真なる矛盾」、
            真でありかつ偽であるような命題が存在するというのです。このような立場を\dfn{真矛盾主義}(\dfn{dialetheism}\footnote{dialetheismという語はdi-aletheia(=「二つの真理」)という造語から来ています。})と呼びます。この記事は真矛盾主義の動機付けやその形式化について紹介します。}
            +p{注意：この記事の3章以降は古典論理の意味論とシーケント計算の基礎的な知識を前提としています。}
        >
        +section {「何故」真矛盾主義か} <
            +p{"Logic: A very short introduction"\cite[`LogicVSI`];という論理学の入門書があります。この本のいい所は新しい論理を紹介する時に「自然言語にこういう推論や概念があって、これをうまく表現する論理体系が欲しい」という感じで何故そういう論理を考えたいのかという動機付けをわかりやすく説明してくれている点です。}
            +p{先程の章で「真でも偽でもあるような文が存在する」という主張を聞いた時に、最初に出る質問はきっと「何故そんなややこしい状況を考えたいのだろうか」になるでしょう。それに対する説明をいくつか紹介します。}

            +subsection {矛盾する法律} <
                +p{一般的に法体系というのは巨大で、しばしばその中に矛盾するような条文があるというのはいかにもありそうなことです。\cite[`IntroNC`];からの引用ですが、例えばオーストラリアの選挙法\footnote{オーストラリアなのは引用元の著者がオーストラリア人だからです。日本の事情に即した条文つくりたかったけど結局いいのが思いつかなかった。}にこんな条文があったとしましょう。
                    \listing{
                        * 全てのアボリジニは投票権を持たない
                        * 全ての土地所有者は投票権を持つ
                    }
                多分この法律ができた当時はアボリジニが土地を持つなんてのは考えられなかったんでしょうねえ(例のために書いてるだけで全く架空の条文です。いいですか)。先住民の差別が撤廃されていく過程でアボリジニの土地所有者がでてくるとこれらの条文が矛盾することになり困ったことになってしまいます。
                }
                +p{これには色々な対策が考えられます。法律が矛盾を含まないような仕組みを導入するのはどうでしょう。例えば「先に書かれている条文を優先する」というルールを導入すればとりあえず先の条文の矛盾は回避されます。しかし他の部分で矛盾が生じないという保証にはなりません。矛盾が発見されしだいすぐ修正するようにするという対策もあります。しかし修正されるまではその法律は矛盾したままになりますし、矛盾が発見されていなかったとしてもその法律が矛盾をはらんでいることには変わりありません。}
                +p{結局のところ、法律に矛盾が生じる可能性を受け入れる必要がありそうです。そのような場合に「矛盾があるからこの法律は無意味だ」という結論にしていては司法が立ちいかなくなってしまいます。代わりにその部分が矛盾していることを認めた上で妥当な推論を重ねて判断を下していくことになるでしょう。このような立場は真矛盾主義の主張に合致します。}
            >
            +subsection {自己言及のパラドックス} <
                +p{もう一つ真矛盾主義によって綺麗に説明できる概念があります。\dfn{自己言及のパラドックス}です。
                \quote{(1) : (1)は偽である}
                こんな感じの文です。この文自体は\dfn{嘘つきのパラドックス}と呼ばれています。この文は真なのでしょうか、偽なのでしょうか。それぞれの場合で考えてみましょう。
                \listing{
                    * (1)が真 → (1)より「(1)は偽」なので(1)は偽
                    * (1)が偽 → (1)の「(1)は偽」に一致するので(1)は真
                }
                どちらにしても前提の反対の結論がでてきて矛盾が生じてしまいますね。この嘘つきのパラドックスを最初に言い出したのはエウブリデスという古代ギリシアの哲学者らしく、歴史のあるパラドックスです。そしてその長い歴史にも関わらず、このパラドックスに対する広く認められた解答は未だに存在しません。}
                +p{解答の一つとしては「自己言及のパラドックスは文として成り立っていない」というものが考えられます。例えば集合論におけるラッセルのパラドックスも自己言及のパラドックスの一種ですが、その解答としての公理的集合論はこのようなパラドックスをそもそも記述できないようにすることで矛盾を回避していると言えます。}
                +p{真矛盾主義は嘘つきのパラドックスを含む自己言及のパラドックスに対し別の解答を提供します。すなわち「(1)は真でありかつ偽である」という解釈です。(1)が真かつ偽であるとすれば、(1)は真なので「(1)は偽」となりますが実際に(1)は偽でもあります。一方(1)は偽なので「(1)は偽」に一致して(1)は真となりますが、(1)は真かつ偽なので問題ありません。屁理屈に聞こえるかもしれませんが、しかし辻褄は合っています。}
            >
        >
        +section {First Degree Entailmentの意味論} <
            +p{このような真矛盾主義主義という考え方があって、それを形式的な論理体系に落としこみたいというのはごく自然な考えですよね。ここでは\dfn{First Degree Entailment}(FDE)\cite[`Belnap77`];という論理体系を紹介します。}
            +p{まず記号の定義をしていきましょう。FDEの命題${A, B, \ldots}は\dfn{原子命題}${p}、\dfn{否定}${\neg A}、\dfn{連言}${A \wedge B}、\dfn{選言}${A \vee B}から成ります。気持ちの説明をすると原子命題は何らかの知識の対象(「猫はかわいい」とか「パリはアメリカの首都だ」とか)を抽象化したもので${p, q, \ldots}と書き表します。否定${\neg A}は「${A}ではない」、連言${A \wedge B}は「${A}かつ${B}である」、選言${A \vee B}は「${A}または${B}である」という意味に解釈できます。
            }
            +p{古典論理だと命題は真であるか偽であるかのどちらかですよね。FDEはこれを一般化してある命題が「真であるかどうか」と「偽であるかどうか」を独立した性質として解釈します。
            \definition ?:({原子命題の解釈}) {
                原子命題の\dfn{解釈}${\tilde}は原子命題と真偽値(${=\brace{0, 1}})の二項関係である。
            }
            ${p\tilde 1}は「${p}は真である」、${p\tilde 0}は「${p}は偽である」という意味になります。ここであるpにおいて${p\tilde 1}かつ${p\tilde 0}である、あるいは${p\tilde 1}でも${p\tilde 0}でもないという状況がありうるのがポイントです。この原子命題の解釈を一般の命題に拡張することができます。
                \definition ?:({命題の解釈}) {
                    命題の解釈は命題と真偽値の二項関係である。原子命題の解釈${\tilde}が与えられた時、これを以下のように拡張して命題の解釈とする。
                    \align[
                        ${|A \wedge B \tilde 1 | \iff A \tilde 1 \and B \tilde 1 |};
                        ${|A \wedge B \tilde 0 | \iff A \tilde 0 \or B \tilde 0 |};
                    ];
                    \align[
                        ${|A \vee B \tilde 1 | \iff A \tilde 1 \or B \tilde 1 |};
                        ${|A \vee B \tilde 0 | \iff A \tilde 0 \and B \tilde 0 |};
                    ];
                    \align[
                        ${| \neg A \tilde 1 | \iff A \tilde 0 |};
                        ${| \neg A \tilde 0 | \iff A \tilde 1 |};
                    ];
                }
            }
            +p{ところで各命題${A}についてありえる可能性は以下の4つしかありません。(${A \ntilde n}は「${A \tilde n}ではない」ことを意味します)
                \listing{
                    * ${A \tilde 1 \and A \ntilde 0} (Aは真である)
                    * ${A \ntilde 1 \and A \tilde 0} (Aは偽である)
                    * ${A \tilde 1 \and A \tilde 0} (Aは真かつ偽である)
                    * ${A \ntilde 1 \and A \ntilde 0} (Aは真でも偽でもない)
                }
            ということはこれらにそれぞれ論理値を割りあてて4値論理とみなすことができます。ここではt(true), f(false), b(both), n(neither)と呼ぶことにしましょう。また、以下のような記法を導入します。
                \notation ?:({解釈の4値表記}) {
                    \align[
                        ${|| A \tilde t || \iff A \tilde 1  \and A \ntilde 0 |};
                        ${|| A \tilde f || \iff A \ntilde 1 \and A \tilde 0 |};
                        ${|| A \tilde b || \iff A \tilde 1  \and A \tilde 0 |};
                        ${|| A \tilde n || \iff A \ntilde 1 \and A \ntilde 0 |};
                    ];
                }
            ここでは記法を変えて4値論理のように表記しているだけですが、実際に4値論理として意味論を与えることももちろん可能です。詳しくは\cite[`Belnap77`; `IntroNC`];を参照してください。
            }
            +p{これらの論理結合子に関する定義はそれぞれの命題が${t}か${f}である場合には古典論理と同じふるまいをすることが確認できます。しかしそうでない状況の場合には面白い結果が得られます。
            例として排中律${A \vee \neg A}がどのように解釈されうるかを考えてみましょう。${A \tilde n}時、${\neg}の定義より${\neg A \tilde n}になり、次に${\vee}の定義より${A \vee \neg A \tilde n}であることが言えます。逆に${A \tilde b}であるような状況を考えると、${\neg}の定義より${\neg A \tilde b}で、さらに${\vee}の定義より${A \vee \neg A \tilde b}であることが導けます。これはFDEにおいて排中律が「真でない」あるいは「偽である」状況がありうることを意味しています。同様のことが無矛盾則${\neg \paren{A \wedge \neg A}}でも成り立ちます。}
        >
        +section{双シーケント計算による推論体系} <
            +p{先程の話はFDEの意味論の側の話でしたが、FDEを論理体系として成立させるためにはその意味論に対応する推論体系も必要です。BelnapによるFDEの元論文\cite[`Belnap77`];でもそういった推論規則を提示していますが、この記事ではBochmanによるBiconsequence Relationを用いた推論体系\cite[`Bochman98`];をベースにした\dfn{双シーケント計算}による推論体系を紹介します。}
            +subsection{双シーケント計算} <
                +p{双シーケント計算は古典論理のシーケント計算を拡張したものです。命題の有限列を${a, b, \ldots}と表記することにしましょう。古典論理のシーケント計算では、
                    \math-list(${| \seq{a}{b} |});
                と表記して「${a}の命題が全て真であれば${b}の命題のうち少なくとも1つが真である」ことを主張するものでした。これを\dfn{シーケント}と呼びます。双シーケント計算ではこれを拡張して、以下のような形の\dfn{双シーケント}を用います。
                    \math-list(${| \biseq{a}{b}{c}{d} |});
                古典論理のシーケントでは2つパートがあったのに対し、こちらでは4つになっています。この双シーケントは「${a}の全てが真で、かつ${b}の全てが偽である時に、${c}の少なくとも1つが真であるか、あるいは${d}の少なくとも一つは偽である」ことを主張します。真と偽が別々の性質になったのでシーケントの持つ情報が倍になったわけです。これは意味論の言葉を使うと以下のような定義で表わされます。
                    \definition ?:({妥当な双シーケント}) ?:(`validity`) {
                        ある双シーケント${\biseq{a}{b}{c}{d}}がFDEの解釈${\tilde}に対して\dfn{妥当}であるとは、全ての${A \in a}について${A \tilde 1}かつ全ての${B \in b}について${B \tilde 0}である場合に、${C \tilde 1}であるような${C \in c}があるかあるいは${D \tilde 0}であるような${D \in d}があることである。また、ある双シーケントが任意の解釈に対して妥当であるとき、単にそのシーケントを妥当であるという。
                    }
                }
                +p{古典論理のシーケント計算と同じく、双シーケント計算では様々な規則を適用することで推論を行います。規則には双シーケントの性質を表す構造規則と論理結合子の意味を規程する規則に分かれます。}
                +p{双シーケント計算おける構造規則は以下のとおりで、古典論理のそれを拡張したものになっています。}
                +math(${
                        \proven!(
                            open DeriveDSL in
                            derive(${\biseq{a, a'}{b, b'}{c, c'}{d, d'}})
                            |> by ({(Weakening)})
                            |> from [
                                assume(${\biseq{a}{b}{c}{d}})
                            ]
                        )
                });
                +math-list(${
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a, B, A}{b}{c}{d}})
                        |> by ({(Exchange PL)})
                        |> from [
                            assume(${\biseq{a, A, B}{b}{c}{d}})
                        ]
                    )
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b, B, A}{c}{d}})
                        |> by ({(Exchange NL)})
                        |> from [
                            assume(${\biseq{a}{b, A, B}{c}{d}})
                        ]
                    )
                |});
                +math-list(${
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b}{c, B, A}{d}})
                        |> by ({(Exchange PR)})
                        |> from [
                            assume(${\biseq{a}{b}{c, A, B}{d}})
                        ]
                    )
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b}{c}{d, B, A}})
                        |> by ({(Exchange NR)})
                        |> from [
                            assume(${\biseq{a}{b}{c}{d, A, B}})
                        ]
                    )
                |});
                
                +math-list(${
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a, A}{b}{c}{d}})
                        |> by ({(Contraction PL)})
                        |> from [
                            assume(${\biseq{a, A, A}{b}{c}{d}})
                        ]
                    )
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b, A}{c}{d}})
                        |> by ({(Contraction NL)})
                        |> from [
                            assume(${\biseq{a}{b, A, A}{c}{d}})
                        ]
                    )
                |});
                +math-list(${
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b}{c, A}{d}})
                        |> by ({(Contraction PR)})
                        |> from [
                            assume(${\biseq{a}{b}{c, A, A}{d}})
                        ]
                    )
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b}{c}{d, A}})
                        |> by ({(Contraction NR)})
                        |> from [
                            assume(${\biseq{a}{b}{c}{d, A, A}})
                        ]
                    )
                |});
                

                +math-list(${
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{A}{\void}{A}{\void}})
                        |> by ({(Reflexivity P)})
                    )
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{\void}{A}{\void}{A}})
                        |> by ({(Reflexivity N)})
                    )
                |});
                +math(${
                    \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b}{c}{d}})
                        |> by ({(Cut P)})
                        |> from [
                            assume(${\biseq{a}{b}{A, c}{d}});
                            assume(${\biseq{A, a}{b}{c}{d}});
                        ]
                    )
                });
                +math(${
                    \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b}{c}{d}})
                        |> by ({(Cut N)})
                        |> from [
                            assume(${\biseq{a}{b}{c}{A, d}});
                            assume(${\biseq{a}{A, b}{c}{d}});
                        ]
                    )
                });
                +p{各規則のPとNはPositiveとNegativeの略で双シーケントの真の部分か偽の部分かに対応します。また、LとRは双シーケントの左側か右かを表しているので以下のように対応します。
                \math-list(${| \biseq{\text!({(PL)})}{\text!({(NL)})}{\text!({(PR)})}{\text!({(NR)})} |});
                }
                +p{(Weakening), (Exchange), (Contraciton)の各規則は双シーケントのそれぞれのパートが集合のように振る舞うことを規程しています。(Reflexivity)の規則は「Aが真ならばAは真である」「Aが偽ならばAは偽である」という直観を規則にしたものです。(Cut)は二つの双シーケントを繋ぎ合わせる役割をもっています。}
            >
            +subsection {FDEの論理結合子に関する規則} <
                +p{次に論理結合子に関する規則を見ていきましょう。古典論理のシーケント計算ではそれぞれの論理結合子について右規則と左規則がありますが、例によってFDEの双シーケント計算ではそれぞれが真と偽の場合に分裂するため論理結合子ごとに4つの規則を持つことになります。}
                +p{
                    ${\vee}に関する規則
                    \math-list(${
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a, A \vee B}{b}{c}{d}})
                        |> by({(${\vee}PL)})
                        |> from [
                            assume(${\biseq{a, A}{b}{c}{d}});
                            assume(${\biseq{a, B}{b}{c}{d}})
                        ]
                    )
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b}{c, A \vee B}{d}})
                        |> by({(${\vee}PR)})
                        |> from [
                            assume(${\biseq{a}{b}{c, A, B}{d}})
                        ]
                    )
                    |});
                    \math-list(${
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b, A \vee B}{c}{d}})
                        |> by({(${\vee}NL)})
                        |> from [
                            assume(${\biseq{a}{b, A, B}{c}{d}})
                        ]
                    )
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b}{c}{d, A \vee B}})
                        |> by({(${\vee}NR)})
                        |> from [
                            assume(${\biseq{a}{b}{c}{d, A}});
                            assume(${\biseq{a}{b}{c}{d, B}})
                        ]
                    )
                    |});
                }
                +p{
                    ${\wedge}に関する規則
                    \math-list(${
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a, A \wedge B}{b}{c}{d}})
                        |> by({(${\wedge}PL)})
                        |> from [
                            assume(${\biseq{a, A, B}{b}{c}{d}})
                        ]
                    )
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b}{c, A \wedge B}{d}})
                        |> by({(${\wedge}PR)})
                        |> from [
                            assume(${\biseq{a}{b}{c, A}{d}});
                            assume(${\biseq{a}{b}{c, B}{d}})
                        ]
                    )
                    |});
                    \math-list(${
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b, A \wedge B}{c}{d}})
                        |> by({(${\wedge}NL)})
                        |> from [
                            assume(${\biseq{a}{b, A}{c}{d}});
                            assume(${\biseq{a}{b, B}{c}{d}})
                        ]
                    )
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b}{c}{d, A \wedge B}})
                        |> by({(${\wedge}NR)})
                        |> from [
                            assume(${\biseq{a}{b}{c}{d, A, B}});
                        ]
                    )
                    |});
                }
                +p{
                   ${\neg} に関する規則
                   \math-list(${
                   | \proven!(
                       open DeriveDSL in
                       derive(${\biseq{a,\neg A}{b}{c}{d}})
                       |> by ({(${\neg}PL)})
                       |> from [
                           assume(${\biseq{a}{b, A}{c}{d}})
                       ])
                   | \proven!(
                       open DeriveDSL in
                       derive(${\biseq{a}{b}{c, \neg A}{d}})
                       |> by ({(${\neg}PR)})
                       |> from [
                           assume(${\biseq{a}{b}{c}{d, A}})
                       ])
                   |});
                   \math-list(${
                   | \proven!(
                       open DeriveDSL in
                       derive(${\biseq{a}{b,\neg A}{c}{d}})
                       |> by ({(${\neg}NL)})
                       |> from [
                           assume(${\biseq{a, A}{b}{c}{d}})
                       ])
                   | \proven!(
                       open DeriveDSL in
                       derive(${\biseq{a}{b}{c}{d, \neg A}})
                       |> by ({(${\neg}NR)})
                       |> from [
                           assume(${\biseq{a, A}{b}{c, A}{d}})
                       ])
                   |});
                }
            >
            +subsection {基本的な性質} <
                +p{これまで紹介した双シーケント計算の体系ですが、重要な性質として以下のものが成り立つと思われます。思われると書いてあるのは元の論文で言及はされていたものの証明はされていなかったからです。
                    \theorem ?:({カット除去定理}) {
                        双シーケント計算による推論があった場合、同じ双シーケントを(Cut P)及び(Cut N)を除いた規則で証明できる。
                    }
                    \theorem ?:({Reflexivityの原子命題への制限}) {
                        双シーケント計算による推論があった場合、同じ双シーケントを(Reflexivity R)と(Reflexivity L)を除き代わりに以下の規則を追加したもので証明できる。
                        \math-list(${
                        | \proven!(
                            open DeriveDSL in
                            derive(${\biseq{p}{\void}{p}{\void}})
                            |> by ({(Reflexivity' P)})
                        )
                        | \proven!(
                            open DeriveDSL in
                            derive(${\biseq{\void}{p}{\void}{p}})
                            |> by ({(Reflexivity' N)})
                        )
                    |});
                    }
                }
                +p{
                    また、意味論との対応について以下の性質が成り立つものと思われます。思われると書いてあるのは元の論文では推論体系の定式化が違っている上に健全性と完全性のステートメントが違うためですね。
                    \theorem ?:({健全性}) {
                        双シーケント計算の推論規則によって証明された双シーケントは妥当である。
                    }
                    \theorem ?:({完全性}) {
                        妥当な双シーケントは双シーケント計算の推論規則によって証明できる。
                    }
                }
                +p{これらの定理は「まあ成り立ってるやろw」くらいのノリで書いてるのであんまり真にうけないでください。まあでも成り立ってると思います。}
            >
        >
        +section {その他の論理結合子} <
            +p{これまで説明してきたFDEの体系は古典論理のそれを内包するようなものになっています。つまり意味論においては「全ての命題の解釈が古典的である、つまり${t}か${f}である、ような場合にはFDEの論理結合子は古典論理のそれと同じ振舞いをする」ということができます。あるいは推論体系においては「古典論理で${\seq{a}{b}}である時にFDEで${\biseq{a}{}{b}{}}」
            それゆえFDEに特徴的な論理結合子を定義することができます。ここでは元論文より\dfn{local negation}と\dfn{L演算子}を紹介します。}
            +p{local negation${\lneg A}は${\neg A}と同じく否定を意味する論理結合子です。${\lneg A}の解釈は以下の通りです。
                \align[
                    ${| \lneg A \tilde 1 | \iff A \ntilde 1 |};
                    ${| \lneg A \tilde 0 | \iff A \ntilde 0 |};
                ];
            ${\neg A}が${A}の真と偽を入れ替えるのに対して、${\lneg A}は${A}の真と偽をそれぞれ裏返すような論理結合子になっています。ちなみに${\lneg}との対比で${\neg}のことを\dfn{switching negation}と呼ぶことがあります\cite[`Bochman98`];。
            local negationは古典的にはswitching negationと同じ振舞いをするのでFDEに特有の論理結合子というのはあまり適切ではないですね。どちらかというと\emph{古典論理における否定がFDEではlocal negationとswitching negationに分裂する}というのが正確に言い方になります。双シーケント計算における規則は以下のようになります。
                \math-list(${
                | \proven!(
                    open DeriveDSL in
                    derive(${\biseq{a,\lneg A}{b}{c}{d}})
                    |> by ({(${\lneg}PL)})
                    |> from [
                        assume(${\biseq{a}{b}{c, A}{d}})
                    ])
                | \proven!(
                    open DeriveDSL in
                    derive(${\biseq{a}{b}{c, \lneg A}{d}})
                    |> by ({(${\lneg}PR)})
                    |> from [
                        assume(${\biseq{a, A}{b}{c}{d}})
                    ])
                |});
                \math-list(${
                | \proven!(
                    open DeriveDSL in
                    derive(${\biseq{a}{b,\lneg A}{c}{d}})
                    |> by ({(${\lneg}NL)})
                    |> from [
                        assume(${\biseq{a}{b}{c}{d, A}})
                    ])
                | \proven!(
                    open DeriveDSL in
                    derive(${\biseq{a}{b}{c}{d, \lneg A}})
                    |> by ({(${\lneg}NR)})
                    |> from [
                        assume(${\biseq{a}{b, A}{c}{d}})
                    ])
                |});
            }
            +p{もう一つ紹介するのは${\L}演算子です。これはFDEに特有の論理結合子で、${\L A}は「Aは真である」ことを意味します。以下の解釈の定義が示すように、${A}が真の時には${\L A}も真で、\emph{${A}が真でない時に${\L A}が偽になります}。
                \align[
                    ${| \L A \tilde 1 | \iff A \tilde 1 |};
                    ${| \L A \tilde 0 | \iff A \ntilde 1 |};
                ];
            導出規則は以下のようになります。
                \math-list(${
                | \proven!(
                    open DeriveDSL in
                    derive(${\biseq{a, \L A}{b}{c}{d}})
                    |> by ({(${\L}PL)})
                    |> from [
                        assume(${\biseq{a, A}{b}{c}{d}})
                    ])
                | \proven!(
                    open DeriveDSL in
                    derive(${\biseq{a}{b}{c, \L A}{d}})
                    |> by ({(${\L}PR)})
                    |> from [
                        assume(${\biseq{a, A}{b}{c, A}{d}})
                    ])
                |});
                \math-list(${
                | \proven!(
                    open DeriveDSL in
                    derive(${\biseq{a}{b,\L A}{c}{d}})
                    |> by ({(${\L}NL)})
                    |> from [
                        assume(${\biseq{a}{b}{c, A}{d}})
                    ])
                | \proven!(
                    open DeriveDSL in
                    derive(${\biseq{a}{b}{c}{d, \L A}})
                    |> by ({(${\L}NR)})
                    |> from [
                        assume(${\biseq{a, A}{b}{c}{d}})
                    ])
                |});
            ここで再度${\vee, \wedge, \neg, \lneg}の導出規則を見返してほしいのですが、これらの導出規則では(PL)と(NR)、(PR)と(NL)の規則がそれぞれ「裏返し」、つまり規則に出てくる${\biseq{a}{b}{c}{d}}を${\biseq{d}{c}{b}{a}}の形に移したものになっています。これらの論理結合子が古典的であることに由来します。一方で${\L}の導出規則がそのような形になっていないことは${\L}がFDEに特有の論理結合子であることを意味しています。}
        >
        +section{真なる矛盾と真でない矛盾} <
            +p{今までFDEの意味論と推論体系について説明してきました。これを用いて実際にどんなことが導けるか、あるいは導けないかを確認してみましょう。}
            +p{まず${\biseq{a}{b}{\void}{\void}}という形の双シーケントについて考えてみましょう。この双シーケントは「${a}の全てが真でかつ${b}の全てが偽であることはありえない」ことを意味します。意味論の言葉で言うと、\ref-definition(`validity`);よりこの双シーケントが妥当であるということは「全ての${A \in a}について${A \tilde 1}で、かつ全ての${B \in b}について${B \tilde 0}であるような解釈${\tilde}が存在しない」ということになります。}
            +p{FDEでは${\biseq{A}{A}{\void}{\void}}という双シーケントは妥当ではありません。${A \tilde 1}かつ${A \tilde 0}であるような解釈${\tilde}が反例になります。このことは${A}が真かつ偽であるという状況があることを意味しています。これを同値な双シーケント${\biseq{A \wedge \neg A}{\void}{\void}{\void}}に置き換えて考えると${A \wedge \neg A}が真である状況があるということになります。これはまさしく真なる矛盾です。}
            +p{一方で${\biseq{A, \lneg A}{\void}{\void}{\void}}は妥当な双シーケントで、以下のように推論できます。
                \math-list (${|
                    \proven!(
                        open DeriveDSL in
                        derive (${\biseq{A, \lneg A}{\void}{\void}{\void}})
                        |> by ({(${\lneg}PL)})
                        |> from [
                            derive(${\biseq{A}{\void}{A}{\void}})
                            |> by ({(Reflexivity P)})
                        ]
                    )
                |});
                ${\biseq{A \wedge \lneg A}{\void}{\void}{\void}}も同値な双シーケントなので、このことは${A \wedge \lneg A}が真になることはありえないことを意味します。こちらは通常の「真でない矛盾」と考えることができます。
            }
            +p{冒頭で真矛盾主義は真なる矛盾が存在するという立場であると説明しましたが、これは全ての矛盾が真であるということではありません\footnote{そういう立場はtrivialismと言うらしい。}。これらの例は真矛盾主義のそのような主張に合致しているといえます。}
        >
        +section{まとめ的なものと読み物} <
            +p{お疲れさまでした。ここまで読んでくれてありがとう、ありがとう…}
            +p{真矛盾主義という名前のイカツさとか主張の過激な響きとは裏腹に、実は結構ちゃんとした動機づけや形式的体系があるという雰囲気を感じとってくれたら幸いです。こういうギャップってよくないですか？？？？}
            +p{この記事では真矛盾主義のエッセンスの部分を解説しましたが、説明できていない部分(あるいはまだ寄稿者が理解できていない部分)がかなりあります。真矛盾主義についてもっと詳しく知りたいという方のために文献の紹介をします。}
            +p{\cite[`LogicVSI`];は論理学の素養がなくても読める入門書です。前に話したように論理学の「なぜこういう論理を考えたいか」というところをわかりやすく説明してくれているので論理をかじったことのある人が読んでも面白いと思います。この本で嘘つきのパラドックスについて論じている章があって、その中で真矛盾主義について言及されています。ちなみに入門書なのに真矛盾主義が入ってきているのは著者のGraham Priestが真矛盾主義の研究者だからだと思われます。}
            +p{\cite[`IntroNC`];は同じくGraham Priestによる非古典論理一般についてのぶ厚い教科書で、本当にぶ厚いので持ち運ぶ気が失せます。結構な数の非古典論理を紹介していていて、その一つとしてFDEも紹介されています。\cite[`LogicVSI`];は気持ちの説明だけですが、こちらの本ではいくつかの意味論とタブロー法による推論、他の多値論理との関わりについてちゃんとした形式的な定義とともに書いてあります。}
            +p{\cite[`Belnap77`];はFDEの初出の論文です。1977年の論文で動機としてAIが出てきているのは時代背景を反映している気がします
                \footnote{攻殻機動隊SACの中で、タチコマがアンドロイドに嘘つきのパラドックスを言うシーンがあるんですよ。アンドロイドは嘘つきのパラドックスが真か偽か判定しようとして無限ループに陥ってフリーズして、それをタチコマが面白がるわけです。あのアンドロイドの思考エンジンはFDEを実装してなかったんやろうな…}
            。今回の話に関係ありそうだった最初のパートしか読んでません。このパートではFDEの意味論を主に解説しており、最後に少しシーケント計算風の推論体系について言及しています。ちなみにその推論体系は今回紹介したものと違って二つのパートからなるシーケントを用いていますが、\cite[`Bochman98`];でそれらの関連性が論じられています。}
            +p{\cite[`Bochman98`];はBiconsequence Relationsという枠組をFDEや古典論理やその他の多値論理を論ずるための共通の土台として使おうという主旨の論文です。Biconsequence Relationの枠組は結構よくできていて、FDEの推論体系の体系化としてほぼ完成しているのではないかという気さえします。FDEの推論体系に興味があるのであれば必読の論文と思われます。ちなみに今回の記事はFDEの紹介をするのが主旨でしたのでFDEに関する部分だけを切り出してシーケント計算の体系にした上で紹介しています。}
        >
    >
>
end
