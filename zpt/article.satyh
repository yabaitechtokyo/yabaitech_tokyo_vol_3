@require: math
@import: ../book-class
@import: ../lib/typeset/derive

module Zpt : sig
  val article : block-text
end = struct

let-math \neg = math-char MathPrefix `¬`
let-math \lneg = math-char MathPrefix `∼`

let-math \iff = text-in-math MathRel (fun ctx -> inline-skip 5pt ++ read-inline ctx {iff} ++ inline-skip 5pt)
let-math \and = text-in-math MathRel (fun ctx -> inline-skip 5pt ++ read-inline ctx {and} ++ inline-skip 5pt)
let-math \or = text-in-math MathRel (fun ctx -> inline-skip 5pt ++ read-inline ctx {or} ++ inline-skip 5pt)
let-math \void = text-in-math MathOrd (fun ctx -> inline-nil)
let-math \tilde = ${\rightarrow}
let-math \ntilde = ${\nrightarrow}
let-math \tilde4 = ${\rightarrow_4}
let-math \L = text-in-math MathPrefix (fun ctx -> read-inline ctx {\emph{L}})

let-math \oarr obj = math-upper obj ${\rightarrow}

let-math \seq ant suc = ${#ant \vdash #suc}
let-math \biseq ant-true ant-false suc-true suc-false =
    ${#ant-true : #ant-false \vdash #suc-true : #suc-false }
let-math \nbiseq ant-true ant-false suc-true suc-false =
    ${#ant-true : #ant-false \nvdash #suc-true : #suc-false }

let-inline ctx \todo inner =
  let ctx-todo = ctx |> set-text-color Color.red in
  read-inline ctx-todo {[TODO: #inner;]}

let-inline ctx \quote inner =
    let font-ratio-cjk = 0.88 in
    let len = ((get-font-size ctx) *' font-ratio-cjk) *' 4. in
    let ib-inner = inline-skip len ++ read-inline ctx inner ++ inline-fil in
    let paragraph = form-paragraph ctx ib-inner in
    inline-fil ++ embed-block-breakable ctx paragraph

let bibliography = [
    (`LogicVSI`, Book(|
        author = {| Graham Priest |};
        title = {Logic: A Very Short Introduction};
        publisher = {Oxford University Press};
        year = 2017
    |));
    (`IntroNC`, Book(|
        author = {| Graham Priest |};
        title = {An Introduction to Non-Classical Logic: From If to Is};
        publisher = {Cambridge University Press};
        year = 2008
    |));
    (`Belnap77`, Article(|
        author = {| Nuel Belnap|};
        title = {A Useful Four-Valued Logic};
        journal = {Modern Uses of Multiple-Valued Logic};
        volume = Some(2);
        number = None;
        pages = (5, 37);
        year = 1977;
    |));
    (`Bochman98`, Article(|
        author = {| Alexander Bochman|};
        title = {Biconsequence Relations: A Four-Valued Formalism of Reasoning with Inconsistency and Incompleteness};
        journal = {Notre Dame Journal of Formal Logic};
        volume = Some(39);
        number = Some({1});
        pages = (47, 73);
        year = 1998;
    |));
    ]

let article =
    open Derive in
    '<
    +chapter ?:(`zpt-article`)
    (|
        bibliography = bibliography;
        title = {真矛盾主義入門};
        author = {zeptometer};
    |)
    <
        +section {序文} <
            +p{「矛盾」という言葉が中国の古典から来ていることはよく知られていますよね。「この盾はどんな攻撃も防ぐぞ」「この矛は全てのものを貫くんだ」なんて調子のいいことをぬかしていた商人が「じゃあその矛でその盾を突いたらどうなるんだ」と真っ当な指摘をされて何も言えなくなってしまったという話です。}
            +p{この話でもそうなのですが、思考や議論に矛盾を生じることを我々はよしとしません。結論が矛盾しているならそれを導く過程や前提のどこかが間違っていると考えるのです。矛盾があってはならないという考えは論理体系の形式化においても最も基本的なアイデアの一つになっています。}
            +p{しかしながらこの無矛盾の原則が必ずしも成り立たないと考える人たちがいます。彼らによると矛盾の中には「真なる矛盾」、
            真でありかつ偽であるような命題が存在するというのです。このような立場を\dfn{真矛盾主義}(\dfn{dialetheism}\footnote{dialetheismという語はdi-aletheia(=「二つの真理」)という造語から来ています。})と呼びます。この記事は真矛盾主義の動機付けやその形式化について紹介します。}
            +p{注意：この記事の3章以降は古典論理の意味論とシーケント計算の基礎的な知識を前提としています。}
        >
        +section {「何故」真矛盾主義か} <
            +p{"Logic: A very short introduction"\cite[`LogicVSI`];という論理学の入門書があります。この本のいい所は新しい論理を紹介する時に「自然言語にこういう推論や概念があって、これをうまく表現する論理体系が欲しい」という感じで何故そういう論理を考えたいのかという動機付けをわかりやすく説明してくれている点です。}
            +p{先程の章で「真でも偽でもあるような文が存在する」という主張を聞いた時に、最初に出る質問はきっと「何故そんなややこしい状況を考えたいのだろうか」になるでしょう。それに対する説明をいくつか紹介します。}

            +subsection {矛盾する法律} <
                +p{一般的に法体系というのは巨大で、しばしばその中に矛盾するような条文があるというのはいかにもありそうなことです。\cite[`IntroNC`];からの引用ですが、例えばオーストラリアの選挙法\footnote{オーストラリアなのは引用元の著者がオーストラリア人だからです。日本の事情に即した条文つくりたかったけど結局いいのが思いつかなかった。}にこんな条文があったとしましょう。
                    \listing{
                        * 全てのアボリジニは投票権を持たない
                        * 全ての土地所有者は投票権を持つ
                    }
                多分この法律ができた当時はアボリジニが土地を持つなんてのは考えられなかったんでしょうねえ(例のために書いてるだけで全く架空の条文です。いいですか)。先住民の差別が撤廃されていく過程でアボリジニの土地所有者がでてくるとこれらの条文が矛盾することになり困ったことになってしまいます。
                }
                +p{これには色々な対策が考えられます。法律が矛盾を含まないような仕組みを導入するのはどうでしょう。例えば「先に書かれている条文を優先する」というルールを導入すればとりあえず先の条文の矛盾は回避されます。しかし他の部分で矛盾が生じないという保証にはなりません。矛盾が発見されしだいすぐ修正するようにするという対策もあります。しかし修正されるまではその法律は矛盾したままになりますし、矛盾が発見されていなかったとしてもその法律が矛盾をはらんでいることには変わりありません。}
                +p{結局のところ、法律に矛盾が生じる可能性を受け入れる必要がありそうです。そのような場合に「矛盾があるからこの法律は無意味だ」という結論にしていては司法が立ちいかなくなってしまいます。代わりにその部分が矛盾していることを認めた上で妥当な推論を重ねて判断を下していくことになるでしょう。このような立場は真矛盾主義の主張に合致します。}
            >
            +subsection {自己言及のパラドックス} <
                +p{もう一つ真矛盾主義によって綺麗に説明できる概念があります。\dfn{自己言及のパラドックス}です。
                \quote{(1) : (1)は偽である}
                こんな感じの文です。この文自体は\dfn{嘘つきのパラドックス}と呼ばれています。この文は真なのでしょうか、偽なのでしょうか。それぞれの場合で考えてみましょう。
                \listing{
                    * (1)が真 → (1)より「(1)は偽」なので(1)は偽
                    * (1)が偽 → (1)の「(1)は偽」に一致するので(1)は真
                }
                どちらにしても前提の反対の結論がでてきて矛盾が生じてしまいますね。この嘘つきのパラドックスを最初に言い出したのはエウブリデスという古代ギリシアの哲学者らしく、歴史のあるパラドックスです。そしてその長い歴史にも関わらず、このパラドックスに対する広く認められた解答は未だに存在しません。}
                +p{解答の一つとしては「自己言及のパラドックスは文として成り立っていない」というものが考えられます。例えば集合論におけるラッセルのパラドックスも自己言及のパラドックスの一種ですが、その解答としての公理的集合論はこのようなパラドックスをそもそも記述できないようにすることで矛盾を回避していると言えます。}
                +p{真矛盾主義は嘘つきのパラドックスを含む自己言及のパラドックスに対し別の解答を提示します。すなわち「(1)は真でありかつ偽である」という解釈です。(1)が真かつ偽であるとすれば、(1)は真なので「(1)は偽」となりますが実際に(1)は偽でもあります。一方(1)は偽なので「(1)は偽」に一致して(1)は真となりますが、(1)は真かつ偽なので問題ありません。屁理屈に聞こえるかもしれませんが、しかし辻褄は合っています。}
            >
        >
        +section ?:(`semantics`) {First Degree Entailmentの意味論} <
            +p{このような真矛盾主義という考え方があって、それを形式的な論理体系に落としこみたいというのはごく自然な考えですよね。そのような論理体系として\dfn{First Degree Entailment} (FDE)\cite[`Belnap77`];を紹介します。}
            +p{まず記号の定義をしていきましょう。FDEの命題${A, B, \ldots}は\dfn{原子命題}${p}、\dfn{否定}${\neg A}、\dfn{連言}${A \wedge B}、\dfn{選言}${A \vee B}から成ります。気持ちの説明をすると原子命題は何らかの知識の対象(「猫はかわいい」とか「パリはアメリカの首都だ」とか)を抽象化したもので${p, q, \ldots}と書き表します。否定${\neg A}は「${A}ではない」、連言${A \wedge B}は「${A}かつ${B}である」、選言${A \vee B}は「${A}または${B}である」という意味に解釈できます。
            }
            +p{古典論理だと命題は真であるか偽であるかのどちらかですよね。FDEはこれを一般化してある命題が「真であるかどうか」と「偽であるかどうか」を独立した性質として解釈します。
            \definition ?:({原子命題の解釈}) {
                原子命題の\dfn{解釈}${\tilde}は原子命題と真偽値(${=\brace{0, 1}})の二項関係である。
            }
            ${p\tilde 1}は「${p}は真である」、${p\tilde 0}は「${p}は偽である」という意味になります。ここであるpにおいて${p\tilde 1}かつ${p\tilde 0}である、あるいは${p\tilde 1}でも${p\tilde 0}でもないという状況がありうるのがポイントです。この原子命題の解釈を拡張して一般の命題の解釈を与えましょう。
                \definition ?:({命題の解釈}) {
                    命題の解釈は命題と真偽値の二項関係である。原子命題の解釈${\tilde}が与えられた時、これを以下のように拡張して命題の解釈とする。
                    \align[
                        ${|A \wedge B \tilde 1 | \iff A \tilde 1 \and B \tilde 1 |};
                        ${|A \wedge B \tilde 0 | \iff A \tilde 0 \or B \tilde 0 |};
                    ];
                    \align[
                        ${|A \vee B \tilde 1 | \iff A \tilde 1 \or B \tilde 1 |};
                        ${|A \vee B \tilde 0 | \iff A \tilde 0 \and B \tilde 0 |};
                    ];
                    \align[
                        ${| \neg A \tilde 1 | \iff A \tilde 0 |};
                        ${| \neg A \tilde 0 | \iff A \tilde 1 |};
                    ];
                }
                例えば連言の例だと「${A \wedge B}が真」であるとは「${A}が真でかつ${B}が真」であるということで、一方で「${A \wedge B}が偽」であるとは「${A}か${B}の少なくとも一方が偽である」ということになります。否定の定義は真と偽をひっくり返す定義になっていてわかりやすいですね。
            }
            +p{
                真と偽が別の性質になっているということは${A \tilde 1}であることと${A \tilde 0}でないことが独立した事象であることを意味しています。こういった議論をしやすくするために以下の記法を導入します。
                \notation {
                    ある解釈${\tilde}が与えられた時、「${A \tilde i}ではない」ことを「${A \ntilde i}」と表記する。
                }
            }
            +p{さて、ある命題${A}が与えられた時に我々は以下の4つの可能性を考えることができます。
                \listing{
                    * ${A \tilde 1 \and A \ntilde 0} (Aは真である)
                    * ${A \ntilde 1 \and A \tilde 0} (Aは偽である)
                    * ${A \tilde 1 \and A \tilde 0} (Aは真かつ偽である)
                    * ${A \ntilde 1 \and A \ntilde 0} (Aは真でも偽でもない)
                }
            ということはこれらにそれぞれ論理値を割りあてて4値論理とみなすことができます。ここではt(true), f(false), b(both), n(neither)と呼ぶことにしましょう。また、以下のような記法を導入します。
                \definition ?:({4値解釈}) {
                    FDEの\dfn{4値解釈}とはFDEの命題と${\brace{t,f,b,n}}の二項関係である。FDEの解釈${\tilde}が与えられた時、以下のようにFDEの4値解釈${\tilde4}を定義できる。
                    \align[
                        ${|| A \tilde4 t || \iff A \tilde 1  \and A \ntilde 0 |};
                        ${|| A \tilde4 f || \iff A \ntilde 1 \and A \tilde 0 |};
                        ${|| A \tilde4 b || \iff A \tilde 1  \and A \tilde 0 |};
                        ${|| A \tilde4 n || \iff A \ntilde 1 \and A \ntilde 0 |};
                    ];
                }
            ここでは間接的に4値論理のようなものをつくっているだけですが、直接4値論理として意味論を与えることももちろん可能です。詳しくは\cite[`IntroNC`; `Belnap77`];を参照してください。
            }
            +p{これらの論理結合子に関する定義はそれぞれの命題が${t}か${f}である場合には古典論理と同じふるまいをすることが確認できます。そういった意味でFDEは古典論理を拡張したものだと言えそうです。しかしそうでない状況の場合には面白い結果が得られます。
            例として排中律${A \vee \neg A}がどのように解釈されうるかを考えてみましょう。${A \tilde4 n}である時、${\neg}(と4値解釈)の定義より${\neg A \tilde4 n}になり、次に${\vee}の定義より${A \vee \neg A \tilde4 n}であることが言えます。逆に${A \tilde4 b}であるような状況を考えると、${\neg}の定義より${\neg A \tilde4 b}で、さらに${\vee}の定義より${A \vee \neg A \tilde4 b}であることが導けます。これはFDEにおいて排中律が「真でない」あるいは「偽である」状況がありうることを意味しています。同様のことが無矛盾則${\neg \paren{A \wedge \neg A}}でも成り立ちます。}
        >
        +section{双シーケント計算による推論体系} <
            +p{先程の話はFDEの意味論の側の話でしたが、FDEを論理体系として成立させるためにはその意味論に対応する推論体系も必要です。BelnapによるFDEの元論文\cite[`Belnap77`];でもそういった推論規則を提示していますが、この記事ではBochmanによるBiconsequence Relationを用いた推論体系\cite[`Bochman98`];をベースにした\dfn{双シーケント計算}による推論体系を紹介します。}
            +subsection ?:(`bisequent`) {双シーケント計算} <
                +p{双シーケント計算は古典論理のシーケント計算\footnote{古典論理のシーケント計算はそれこそ古典なので検索したら山ほど資料が出てきます。詳細についてはそれらをご参照ください:P}を拡張したものです。命題の有限列を${a, b, \ldots}と表記することにしましょう。古典論理のシーケント計算では、
                    \math-list(${| \seq{a}{b} |});
                と表記して「${a}の命題が全て真でかつ${b}の命題が偽であることはない」\footnote{これは「${a}の命題が全て真である時、${b}の命題のうち少なくとも一つが真である」と同値で、多分こっちの方が馴染みのある定義だと思います。この記事では後でする説明の都合上このように言い代えています。}ことを主張するものでした。これを\dfn{シーケント}と呼びます。FDEの双シーケント計算ではこれを拡張して、以下のような形の\dfn{双シーケント}を用います。
                    \math-list(${| \biseq{a}{b}{c}{d} |});
                古典論理のシーケントでは2つパートがあったのに対し、こちらでは4つになっています。この双シーケントは「${a}の全てが真で、${b}の全てが偽で、${c}の全てが真でなく、かつ${d}の全てが偽でないということはない」ことを主張します。真と偽が別々の性質になったのでシーケントの持つ情報が倍になったわけです。これは意味論の言葉を使うと以下のような定義で表わされます。
                    \definition ?:({妥当な双シーケント}) ?:(`validity`) {
                        ある双シーケント${\biseq{a}{b}{c}{d}}がFDEの解釈${\tilde}に対して\dfn{妥当}であるとは、「全ての${A \in a}について${A \tilde 1}、かつ全ての${B \in b}について${B \tilde 0}、全ての${C \in c}について${C \ntilde 1}、全ての${D \in d}について${D \ntilde 0}」\emph{ではない}ことである。また、ある双シーケントが任意の解釈に対して妥当であるとき、単にそのシーケントを妥当であるという。
                    }
                    うーん長い。でも言ってることは単純なので最後の「ではない」にさえ注意してくれれば多分問題ないです。
                }
                +p{以降特に新しい推論体系が出ることもないので、古典論理のシーケント計算とFDEの双シーケント計算をそれぞれ単にシーケント計算と双シーケント計算と呼ぶことにしましょう。シーケント計算と同じく、双シーケント計算では様々な規則を適用することで推論を行います。規則には双シーケントの性質を表す構造規則と論理結合子の意味を規定する規則に分かれます。}
                +p{双シーケント計算の構造規則はシーケント計算の構造規則を拡張したものになっています。\ref-figure(`strules`);が構造規則の一覧です。各規則名の中のPとNはPositiveとNegativeの略で双シーケントの真の部分か偽の部分かに対応します。また、LとRは双シーケントの左側(Left)か右(Right)かを表しており、以下のように双シーケントのそれぞれの部分に対応します。
                \math-list(${| \biseq{\text!({(PL)})}{\text!({(NL)})}{\text!({(PR)})}{\text!({(NR)})} |});
                }

                +p{
                \figure ?:(`strules`) {双シーケント計算の構造規則} <
                    +math(${
                            \proven!(
                                open DeriveDSL in
                                derive(${\biseq{a, a'}{b, b'}{c, c'}{d, d'}})
                                |> by ({(Weakening)})
                                |> from [
                                    assume(${\biseq{a}{b}{c}{d}})
                                ]
                            )
                    });

                    +math-list(${
                        | \proven!(
                            open DeriveDSL in
                            derive(${\biseq{a, B, A, a'}{b}{c}{d}})
                            |> by ({(Exchange PL)})
                            |> from [
                                assume(${\biseq{a, A, B, a'}{b}{c}{d}})
                            ]
                        )
                        | \proven!(
                            open DeriveDSL in
                            derive(${\biseq{a}{b, B, A, b'}{c}{d}})
                            |> by ({(Exchange NL)})
                            |> from [
                                assume(${\biseq{a}{b, A, B, b'}{c}{d}})
                            ]
                        )
                    |});

                    +math-list(${
                        | \proven!(
                            open DeriveDSL in
                            derive(${\biseq{a}{b}{c, B, A, c'}{d}})
                            |> by ({(Exchange PR)})
                            |> from [
                                assume(${\biseq{a}{b}{c, A, B, c'}{d}})
                            ]
                        )
                        | \proven!(
                            open DeriveDSL in
                            derive(${\biseq{a}{b}{c}{d, B, A, d'}})
                            |> by ({(Exchange NR)})
                            |> from [
                                assume(${\biseq{a}{b}{c}{d, A, B, d'}})
                            ]
                        )
                    |});

                    +math-list(${
                        | \proven!(
                            open DeriveDSL in
                            derive(${\biseq{a, A}{b}{c}{d}})
                            |> by ({(Contraction PL)})
                            |> from [
                                assume(${\biseq{a, A, A}{b}{c}{d}})
                            ]
                        )
                        | \proven!(
                            open DeriveDSL in
                            derive(${\biseq{a}{b, A}{c}{d}})
                            |> by ({(Contraction NL)})
                            |> from [
                                assume(${\biseq{a}{b, A, A}{c}{d}})
                            ]
                        )
                    |});

                    +math-list(${
                        | \proven!(
                            open DeriveDSL in
                            derive(${\biseq{a}{b}{c, A}{d}})
                            |> by ({(Contraction PR)})
                            |> from [
                                assume(${\biseq{a}{b}{c, A, A}{d}})
                            ]
                        )
                        | \proven!(
                            open DeriveDSL in
                            derive(${\biseq{a}{b}{c}{d, A}})
                            |> by ({(Contraction NR)})
                            |> from [
                                assume(${\biseq{a}{b}{c}{d, A, A}})
                            ]
                        )
                    |});
                    

                    +math-list(${
                        | \proven!(
                            open DeriveDSL in
                            derive(${\biseq{A}{\void}{A}{\void}})
                            |> by ({(Reflexivity P)})
                        )
                        | \proven!(
                            open DeriveDSL in
                            derive(${\biseq{\void}{A}{\void}{A}})
                            |> by ({(Reflexivity N)})
                        )
                    |});
                    +math(${
                        \proven!(
                            open DeriveDSL in
                            derive(${\biseq{a}{b}{c}{d}})
                            |> by ({(Cut P)})
                            |> from [
                                assume(${\biseq{a}{b}{A, c}{d}});
                                assume(${\biseq{A, a}{b}{c}{d}});
                            ]
                        )
                    });
                    +math(${
                        \proven!(
                            open DeriveDSL in
                            derive(${\biseq{a}{b}{c}{d}})
                            |> by ({(Cut N)})
                            |> from [
                                assume(${\biseq{a}{b}{c}{A, d}});
                                assume(${\biseq{a}{A, b}{c}{d}});
                            ]
                        )
                    });
                >
                }
                +p{
                    これらの構造規則のもっともらしさは双シーケントについての直観によって正当化されます。双シーケントのお気持ちを振り返ると、${\biseq{a}{b}{c}{d}}という双シーケントは「${a}の全てが真で、${b}の全てが偽で、${c}の全てが真でなく、かつ${d}の全てが偽でないこと」はありえないということを表すのでした。この「${a}の全てが真で、…」の部分を直接書くと長ったらしくて嫌なので以降「※」と書くことにしてしまいましょう。
                }
                +p{
                    さて、「※」がありえないのであれば、「Aが真でありかつ※」のように水増しをしても変わらずありえないはずです。この直観に対応するのが(Weakening)の規則です。また、「※」のうち${a}の中の命題の順番を入れ替えても「※」がありえないことは変わりませんし、${a}の中にいくつ同じ命題が出てきたところでその命題が1つしかない時と状況は変わりません。これらの直観にはそれぞれ各Exchange規則と各Contraction規則が対応しています。
                }
                +p{
                    少し話が逸れますが、双シーケントにおける「ありえない」状況の最小単位は何になるでしょうか。\ref-section(`semantics`);で説明した意味論を直観の助けにして考えてみましょう。例えば「${A}が真でかつ${A}が真でない」という状況はありえないはずですよね、ある解釈${\tilde}が与えられたら${A \tilde 1}か${A \ntilde 0}のどちらかは必ず成り立ちますから。同様に「${A}が偽でかつ${A}が偽でない」という状況もありえないはずです。これらの直観を構造規則として表現したものがそれぞれ(Reflexivity P)と(Reflexivity N)です。一方でFDEでは「Aが真かつ偽である」という状況や「Aは真でも偽でもない」という状況がありうるのは\ref-section(`semantics`);で話した通りです。そのため以下のようなものは構造規則には入らないことになります。
                    \math-list(${
                        | \proven!(
                            open DeriveDSL in
                            derive(${\biseq{A}{A}{\void}{\void}})
                            |> by ({(Reflexivity L)})
                        )
                        | \proven!(
                            open DeriveDSL in
                            derive(${\biseq{\void}{\void}{A}{A}})
                            |> by ({(Reflexivity R)})
                        )
                    |});
                }
                +p{
                    (Cut)は違う場所にある同じ命題を打ち消す構造規則です。例えば「${A}が真でありかつ※」ではないことと「${A}が真ではなくかつ※」ではないことの両方がわかっていれば、${A}が真であろうとなかろうと「※」ではないことがわかりますよね。この直観を構造規則にしたものが(Cut P)です。この真を偽にひっくり返せば(Cut N)になります。
                 }
            >
            +subsection {シーケントから双シーケントへ} <
                +p{先ほどから何度か「FDEは古典論理の拡張である」という主張をしてきましたが、そうであればシーケントを双シーケントに埋め込むことができるはずです。これをどう実現するか考えてみましょう。シーケントは「真」と「偽」の2つのパートに分かれていたところが、双シーケントではこれらが細分化されて「真である」「偽である」「真でない」「偽でない」の4つのパートに分かれているのでした。このうち「真」は「真である」と「偽でない」、「偽」は「真でない」と「偽である」に対応づけられそうですね。}
                +p{結論から言ってしまうとシーケントから双シーケントへ埋め込むにあたって以下の2通りの対応づけが健全な埋め込みを与えます\footnote{ここでの健全性とは妥当性を保つ埋め込みであることを意味します。多分成り立つけど証明はないです。間違ってたらごめん……}。
                    \listing{
                        * (真)${\Rightarrow}(真である), (偽)${\Rightarrow}(真でない)
                        * (真)${\Rightarrow}(偽でない), (偽)${\Rightarrow}(偽である)
                    }
                これをシーケントから双シーケントへの対応づけとして表現すると以下のようになります。
                    \listing{
                        * (Positive Embedding) ${\seq{a}{b} \Rightarrow \biseq{a}{\void}{b}{\void}}
                        * (Negative Embedding) ${\seq{a}{b} \Rightarrow \biseq{\void}{b}{\void}{a}}
                    }
                このようにシーケントを双シーケントに埋め込むにあたって2通りの解釈を考えることができます。}
            >
            +subsection ?:(`connectives`) {FDEの論理結合子に関する規則} <
                +p{次に論理結合子に関する規則を見ていきます。先ほどシーケントから双シーケントへの埋め込みについて議論したところなので、発展としてシーケント計算の規則を用いて双シーケント計算の規則をつくってみましょう。まずはシーケント計算の連言に関する規則の一つ(${\wedge}L)を変換します。
                        \math-list(${
                        | \proven!(
                            open DeriveDSL in
                            derive(${\seq{a, A \wedge B}{b}})
                            |> by({(${\wedge}L)})
                            |> from [
                                assume(${\seq{a, A, B}{b}})
                            ]
                        )
                        |});
                    まず規則に出てくるシーケントをPositiveとNegativeのそれぞれの埋め込みで変換すると以下のものが得られます。
                        \math-list(${
                        | \proven!(
                            open DeriveDSL in
                            derive(${\biseq{a, A \wedge B}{\void}{b}{\void}})
                            |> by({(${\wedge}PL?)})
                            |> from [
                                assume(${\biseq{a, A, B}{\void}{b}{\void}})
                            ]
                        )
                        | \proven!(
                            open DeriveDSL in
                            derive(${\biseq{\void}{b}{\void}{a, A \wedge B}})
                            |> by({(${\wedge}NR?)})
                            |> from [
                                assume(${\biseq{\void}{b}{\void}{a, A, B}})
                            ]
                        )
                        |});
                    このままだと規則中の双シーケントに空の部分があってよくないので適当に埋めちゃいましょう。
                        \math-list(${
                        | \proven!(
                            open DeriveDSL in
                            derive(${\biseq{a, A \wedge B}{b}{c}{d}})
                            |> by({(${\wedge}PL)})
                            |> from [
                                assume(${\biseq{a, A, B}{b}{c}{d}})
                            ]
                        )
                        | \proven!(
                            open DeriveDSL in
                            derive(${\biseq{a}{b}{c}{d, A \wedge B}})
                            |> by({(${\wedge}NR)})
                            |> from [
                                assume(${\biseq{a}{b}{c}{d, A, B}})
                            ]
                        )
                        |});
                    うんうん、なかなかいい感じですね。実際にこの規則が全節のFDEの意味論に対して健全であることは容易に確認できるはずです。
                }
                +p{この調子で選言、連言、否定について双シーケント計算での規則を作ることにしましょう。}
                +p{
                    \listing{* ${\vee}に関する規則}
                    \math-list(${
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a, A \vee B}{b}{c}{d}})
                        |> by({(${\vee}PL)})
                        |> from [
                            assume(${\biseq{a, A}{b}{c}{d}});
                            assume(${\biseq{a, B}{b}{c}{d}})
                        ]
                    )
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b}{c, A \vee B}{d}})
                        |> by({(${\vee}PR)})
                        |> from [
                            assume(${\biseq{a}{b}{c, A, B}{d}})
                        ]
                    )
                    |});
                    \math-list(${
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b, A \vee B}{c}{d}})
                        |> by({(${\vee}NL)})
                        |> from [
                            assume(${\biseq{a}{b, A, B}{c}{d}})
                        ]
                    )
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b}{c}{d, A \vee B}})
                        |> by({(${\vee}NR)})
                        |> from [
                            assume(${\biseq{a}{b}{c}{d, A}});
                            assume(${\biseq{a}{b}{c}{d, B}})
                        ]
                    )
                    |});

                    \listing{* ${\wedge}に関する規則}
                    \math-list(${
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a, A \wedge B}{b}{c}{d}})
                        |> by({(${\wedge}PL)})
                        |> from [
                            assume(${\biseq{a, A, B}{b}{c}{d}})
                        ]
                    )
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b}{c, A \wedge B}{d}})
                        |> by({(${\wedge}PR)})
                        |> from [
                            assume(${\biseq{a}{b}{c, A}{d}});
                            assume(${\biseq{a}{b}{c, B}{d}})
                        ]
                    )
                    |});
                    \math-list(${
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b, A \wedge B}{c}{d}})
                        |> by({(${\wedge}NL)})
                        |> from [
                            assume(${\biseq{a}{b, A}{c}{d}});
                            assume(${\biseq{a}{b, B}{c}{d}})
                        ]
                    )
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b}{c}{d, A \wedge B}})
                        |> by({(${\wedge}NR)})
                        |> from [
                            assume(${\biseq{a}{b}{c}{d, A, B}});
                        ]
                    )
                    |});
        
                    \listing{* ${\neg}に関する規則}
                    \math-list(${
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a,\neg A}{b}{c}{d}})
                        |> by ({(${\neg}PL?)})
                        |> from [
                            assume(${\biseq{a}{b}{c, A}{d}})
                        ])
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b}{c, \neg A}{d}})
                        |> by ({(${\neg}PR?)})
                        |> from [
                            assume(${\biseq{a, A}{b}{c}{d}})
                        ])
                    |});
                    \math-list(${
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b,\neg A}{c}{d}})
                        |> by ({(${\neg}NL?)})
                        |> from [
                            assume(${\biseq{a}{b}{c}{d, A}})
                        ])
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b}{c}{d, \neg A}})
                        |> by ({(${\neg}NR?)})
                        |> from [
                            assume(${\biseq{a}{b, A}{c}{d}})
                        ])
                    |});
                }
                +p{ちょっと待ってください。どうも最後の否定に関する規則は意味論にうまく対応していないようです。例えば以下のような推論を考えると、${A \tilde4 b}であるような${\tilde}において妥当な前提から妥当でない結論が導かれてしまいます。
                    \math-list(${
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{\neg A}{\void}{\void}{\void}})
                        |> by ({(${\neg}PL)})
                        |> from [
                            assume(${\biseq{\void}{\void}{A}{\void}})
                        ])
                    |});
                }
                +p{何かを間違ったのか？というとそういうわけではありません。ネタバラシをすると、こうやって得られる否定は実は\ref-section(`semantics`);で定義した否定とは別物なのです。先ほど古典論理の否定から得た否定は\dfn{local negation}と呼ばれるもので、以降は区別のために${\neg A}ではなく${\lneg A}と書くことにします。local negationの解釈は以下のように定義されます。
                    \align[
                        ${| \lneg A \tilde 1 | \iff A \ntilde 1 |};
                        ${| \lneg A \tilde 0 | \iff A \ntilde 0 |};
                    ];
                対して\ref-section(`semantics`);で定義した否定を\dfn{switching negation}と呼びます。local negationは真であるかないか偽であるかないかを裏返すものであるのに対し、switching negationを真と偽を入れ替えるものというわけです。それぞれの双シーケント計算における定義は以下のようになります。}
                +p{
                   \listing{* ${\neg} (switching negation)に関する規則}
                   \math-list(${
                   | \proven!(
                       open DeriveDSL in
                       derive(${\biseq{a,\neg A}{b}{c}{d}})
                       |> by ({(${\neg}PL)})
                       |> from [
                           assume(${\biseq{a}{b, A}{c}{d}})
                       ])
                   | \proven!(
                       open DeriveDSL in
                       derive(${\biseq{a}{b}{c, \neg A}{d}})
                       |> by ({(${\neg}PR)})
                       |> from [
                           assume(${\biseq{a}{b}{c}{d, A}})
                       ])
                   |});
                   \math-list(${
                   | \proven!(
                       open DeriveDSL in
                       derive(${\biseq{a}{b,\neg A}{c}{d}})
                       |> by ({(${\neg}NL)})
                       |> from [
                           assume(${\biseq{a, A}{b}{c}{d}})
                       ])
                   | \proven!(
                       open DeriveDSL in
                       derive(${\biseq{a}{b}{c}{d, \neg A}})
                       |> by ({(${\neg}NR)})
                       |> from [
                           assume(${\biseq{a}{b}{c, A}{d}})
                       ])
                   |});
                \listing{* ${\lneg} (local negation)に関する規則}
                    \math-list(${
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a,\lneg A}{b}{c}{d}})
                        |> by ({(${\lneg}PL)})
                        |> from [
                            assume(${\biseq{a}{b}{c, A}{d}})
                        ])
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b}{c, \lneg A}{d}})
                        |> by ({(${\lneg}PR)})
                        |> from [
                            assume(${\biseq{a, A}{b}{c}{d}})
                        ])
                    |});
                    \math-list(${
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b,\lneg A}{c}{d}})
                        |> by ({(${\lneg}NL)})
                        |> from [
                            assume(${\biseq{a}{b}{c}{d, A}})
                        ])
                    | \proven!(
                        open DeriveDSL in
                        derive(${\biseq{a}{b}{c}{d, \lneg A}})
                        |> by ({(${\lneg}NR)})
                        |> from [
                            assume(${\biseq{a}{b, A}{c}{d}})
                        ])
                    |});
                }
                +p{これらは古典的な設定(= 全ての命題が${t}か${f}である)場合には同じように振舞います。なので古典論理における否定がlocal negationとswitching negationに分裂したと解釈することもできます。ところで面白いことにいくつかの文献(例えば\cite[`IntroNC`];とか)ではFDEにおける否定の論理結合子としてswitching negationのみを提示しており、古典論理の否定を素直に拡張して得られるはずのlocal negationには言及していません(\ref-section(`semantics`);でもそのような流れになっているのはそういうことです)。紙面上の都合もあるのでしょうが、FDEの設定で初めて考えることのできるswitching negationこそが「否定」として適切な概念だという考えが根底にあるのではないかと思われます。}
            >
            +subsection {基本的な性質} <
                +p{これまで紹介した双シーケント計算の体系ですが、重要な性質として以下のものが成り立つと思われます。思われると書くのは証明したわけではないのと、元論文で紹介されていた体系に多少手を加えている結果として元論文で言及されていた性質がこの記事で紹介している双シーケント計算に成り立つかが不明であるためです。この体系が適切に定義されていたら成り立つはずの性質、くらいに思っていただければ。
                    \theorem ?:({カット除去定理}) {
                        双シーケント計算による推論があった場合、同じ双シーケントを(Cut P)及び(Cut N)を除いた規則で証明できる。
                    }
                    \theorem ?:({Reflexivityの原子命題への制限}) {
                        双シーケント計算による推論があった場合、同じ双シーケントを(Reflexivity P)と(Reflexivity N)を除き代わりに以下の規則を追加したもので証明できる。
                        \math-list(${
                        | \proven!(
                            open DeriveDSL in
                            derive(${\biseq{p}{\void}{p}{\void}})
                            |> by ({(Reflexivity' P)})
                        )
                        | \proven!(
                            open DeriveDSL in
                            derive(${\biseq{\void}{p}{\void}{p}})
                            |> by ({(Reflexivity' N)})
                        )
                    |});
                    }
                }
                +p{
                    \theorem ?:({健全性}) {
                        双シーケント計算の推論規則によって証明された双シーケントは妥当である。
                    }
                    \theorem ?:({完全性}) {
                        妥当な双シーケントは双シーケント計算の推論規則によって証明できる。
                    }
                }
            >
            +subsection {部分構造論理としての真矛盾主義} <
                +p{
                    ここで少し\ref-subsection(`bisequent`);におけるReflexivityの構造規則にについての議論をおさらいしましょう。Reflexivityの規則はありえない状況の最小単位を提示する構造規則で、それがFDEにおいては(Reflexivity P)と(Reflexivity N)の二つになるのでした。他の二つの規則、(Reflexivity L)と(Reflexivity R)はFDEの直観に沿わないとして構造規則に加えませんでしたが、実はこれらを構造規則として認めると古典論理になります。「真である」「偽でない」と「真でない」「偽である」がそれぞれ潰れてしまうんですね。例えば以下の証明は${\biseq{a, A}{b}{c}{d}}から${\biseq{a}{b}{c}{d, A}}を導いていて、命題${A}を「真である」から「偽でない」へ移しています。

                    \math-list (${|
                        \proven!(
                            open DeriveDSL in
                            derive(${ \biseq{a}{b}{c}{d, A} })
                            |> by {(Cut P)}
                            |> from [
                                derive(${ \biseq{a}{b}{c, A}{d, A} })
                                |> by {(Weakening)}
                                |> from [
                                    derive(${ \biseq{\void}{\void}{A}{A} })
                                    |> by {(Reflexivity R)}
                                ];
                                derive(${ \biseq{a, A}{b}{c}{d, A} })
                                |> by {(Weakening)}
                                |> from [
                                    assume(${ \biseq{a, A}{b}{c}{d} })
                                ]
                            ]
                        )
                    |});

                    証明に(Reflexivity R)を使っているのがミソです。このように古典論理の双シーケント計算を考えても4つのパートが実質2つに潰れてしまうことになるのであまりメリットはないように思えます。
                }
                +p{
                    ちょっと待ってください、この議論を別の視点からとらえなおしてみます。通常の古典論理のシーケント計算では以下の構造規則がReflexivityに関する唯一の構造規則です。

                    \math-list (${|
                        \proven!(
                            open DeriveDSL in
                            derive(${ \seq{A}{A} })
                            |> by {(Reflexivity)}
                        )
                    |});

                    \ref-subsection(`bisequent`);にあるシーケントの気持ちを思いだしてほしいのですが、このシーケントは「Aが真でかつ偽であることはありえない」ということを表わしています。さらに古典論理では矛盾は「Aが真でかつ偽」の形しかないので、(Reflexivity)は矛盾が存在しいないことを表す構造規則だと解釈できます。しかしシーケントから双シーケントに拡張すると、矛盾をより細かい粒度で表現することが可能になります。
                    \listing {
                        * ${\bot_P}: Aが真でかつ真でない
                        * ${\bot_N}: Aが偽でかつ偽でない
                        * ${\bot_L}: Aが真でかつ偽である
                        * ${\bot_R}: Aが真でも偽でもない
                    }
                    双シーケント計算におけるReflexivityのP,N,L,Rの各規則はそれぞれ以下の矛盾を認めない規則であると解釈できます。古典論理ではこれらを全て認めていないのに対して、FDEでは${\bot_L}と${\bot_R}を\emph{真なる矛盾}として認めていて、これは(Reflexivity R)と(Reflexivity L)の構造規則を落とすことによって達成されているわけです。
                }
                +p{
                    まとめると、FDEの本質的な部分は
                    \listing{
                        * 双シーケントによって古典論理における矛盾(=Reflexivityの規則)を4つに細分化し
                        * そのうち2つを\emph{真なる矛盾}として認める(=構造規則に入れない)
                    }
                    部分にあるのではないかと思われます。このような見方をするとFDEは古典論理の「部分構造論理」の一種として考えられないでしょうか。
                }
            >
        >
        +section{まとめ的なものと読み物} <
            +p{お疲れさまでした。ここまで読んでくれてありがとう、ありがとう……}
            +p{真矛盾主義という名前のイカツさとか主張の過激な響きとは裏腹に、実は結構ちゃんとした動機づけや形式的体系があるという雰囲気を感じとってくれたら幸いです。こういうギャップがいいんですよ、わかっていただけますよね。}
            +p{この記事では真矛盾主義のエッセンスの部分を解説しましたが、説明できていない部分(あるいはまだ寄稿者が理解できていない部分)がかなりあります。真矛盾主義についてもっと詳しく知りたいという方のために文献の紹介をします。}
            +p{\cite[`LogicVSI`];は論理学の素養がなくても読める入門書です。前に話したように論理学の「なぜこういう論理を考えたいか」というところをわかりやすく説明してくれているので論理をかじったことのある人が読んでも面白いと思います。この本で嘘つきのパラドックスについて論じている章があって、その中で真矛盾主義について言及されています。ちなみに入門書なのに真矛盾主義が入ってきているのは著者のGraham Priestが真矛盾主義の研究者だからだと思われます。}
            +p{\cite[`IntroNC`];は同じくGraham Priestによる非古典論理一般についてのぶ厚い教科書で、本当にぶ厚いので持ち運ぶ気が失せます。結構な数の非古典論理を紹介していていて、その一つとしてFDEも紹介されています。\cite[`LogicVSI`];は気持ちの説明だけですが、こちらの本ではいくつかの意味論とタブロー法による推論、他の多値論理との関わりについてちゃんとした形式的な定義とともに書いてあります。}
            +p{\cite[`Belnap77`];はFDEの初出の論文です。1977年の論文で動機としてAIが出てきているのは時代背景を反映している気がします
                \footnote{攻殻機動隊SACの中で、タチコマがアンドロイドに嘘つきのパラドックスを言うシーンがあるんですよ。アンドロイドは嘘つきのパラドックスが真か偽か判定しようとして無限ループに陥ってフリーズして、それをタチコマが面白がるわけです。あのアンドロイドの思考エンジンはFDEを実装してなかったんやろうな……}
            。今回の話に関係ありそうだった最初のパートしか読んでません。このパートではFDEの意味論を主に解説しており、最後に少しシーケント計算風の推論体系について言及しています。ちなみにその推論体系は今回紹介したものと違って二つのパートからなるシーケントを用いていますが、\cite[`Bochman98`];でそれらの関連性が論じられています。}
            +p{\cite[`Bochman98`];はBiconsequence Relationsという枠組をFDEや古典論理やその他の多値論理を論ずるための共通の土台として使おうという主旨の論文です。Biconsequence Relationの枠組は結構よくできていて、FDEの推論体系の体系化としてほぼ完成しているのではないかという気さえします。FDEの推論体系に興味があるのであれば必読の論文と思われます。ちなみに今回の記事はFDEの紹介をするのが主旨でしたのでFDEに関する部分だけを切り出してシーケント計算の体系にした上で紹介しています。}
        >
    >
>
end
