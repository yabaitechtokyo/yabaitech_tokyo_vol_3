@import: regexp
@import: string
@require: list

module Lexer : sig
  val lex : ((| kind : string; regexp : RegExp.t |)) list -> string -> (((| kind : string; data : string |)) list) option
end = struct

  let lex rules src =
    let len = String.length src in
    let-rec loop i acc =
      if i == len
      then Some (List.reverse acc)
      else
        let s = String.sub src i (len - i) in
        let-rec iter rules = match rules with
        | [] -> None
        | (r :: rules) -> let (m :: _) = RegExp.exec (RegExp.seq RegExp.head r#regexp) s in
          (match m with
          | None -> iter rules
          | (Some (_, m)) -> loop (i + String.length m) ((| kind = r#kind; data = m |) :: acc)) in
        iter rules in
    loop 0 []
  
end