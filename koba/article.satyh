@import: ../lib/regexp
@import: ../book-class
@import: ../lib/typeset/code2
@import: ./bibliography
@import: ./defs

module Koba : sig
  val article : block-text
end = struct

let article = '<
    +chapter ?:(`koba-article`)
    (|
        bibliography = bibliography;
        title = {Schreier-SimsのアルゴリズムをRustで実装した};
        author = {koba-e964};
    |)
    <
        +section {はじめに} <
            +p{
            趣味で数学を勉強している kobae964 です。
            置換群の位数を求めるための \emph{Schreier-Sims のアルゴリズム} \footnote{https://en.wikipedia.org/wiki/Schreier\%E2\%80\%93Sims_algorithm} というアルゴリズムを実装したので、それの解説を書いていきたいと思います。
            }

            +p{
            GAP \cite[`GAPSystem`]; などの計算代数システムを使うと、色々な計算をたちどころに行うことができて非常に便利です。しかし、その内部でどのような処理が実行されているのかは、知らない方も多いのではないでしょうか?
            置換群の位数の計算もその一つのように思えます。例えば ${3 \times 3 \times 3} ルービックキューブの可能な配置は有限群をなすので、その総数は、GAP を使用すれば簡単に計算できます。\cite[`Fuj2006`]; しかし、そのために内部でどのような処理を必要とするのかは決して自明ではありません。ルービックキューブの配置の総数は ${43252003274489856000 \simeq 4.3 \cdot 10^{19}}\footnote{${43252003274489856000 = 2^{11} \times 3^7 \times 12\! \times 8\! / 2}} であり、愚直に一つ一つの配置を見ていくやり方では決して全数検査を行うことはできません。
            これの内部で実行されているのが Schreier-Sims のアルゴリズムです。${n} 点の置換群について、${n} についての多項式時間で位数を計算することができます。
            }

            +p{
            この記事では、Schreier-Sims のアルゴリズムのアイディア、実装を追っていけたらと思います。今回はアルゴリズムの基本方針についてです。
            なお、実装は GitHub のリポジトリ\cite[`GAPRepositoryKoba`]; に置いてあるので、興味のある方は読んでいただけたらと思います。
            }
        >
        +section {前提知識} <
             +p{
             群論の初歩的な知識、およびグラフ理論の初歩的な知識を仮定する。また擬似コードも Rust 風に書くので、Rust の知識があることも望ましい。
             \listing{
             * 群論: (例えば \cite[`WikGroupTheory`];)
             * グラフ理論
               ** 深さ優先探索 (例えば \cite[`WikDFS`];)
               ** 幅優先探索 (例えば \cite[`WikBFS`];)
             * Rust (例えば \cite[`RustLang`];)
             }%
             }
        >
        +section {記法} <
            +p{
                  群の作用は右作用とする。つまり、${x} に対する ${g} の作用を ${x^g} と表記する。これは GAP における流儀と合わせている。
                  よく使われる左作用の記法 (${g \cdot x}) と逆であることに注意されたい。
作用は ${x^{g \cdot h} = \(x^g\)^h} を満たす必要がある。これも左作用の公理 (${\(g \cdot h\) \cdot x = g \cdot \(h \cdot x\)}) とは逆である。
            }
        >
        +section {導入} <
            +p{
                計算群論において、Schreier-Simsのアルゴリズムは
                置換群の位数を計算したり、
                置換群にある要素が含まれているかを高速に判定したり…などのクエリへの高速な応答を行うための前計算アルゴリズムである。
                今回は置換群 ${G} の位数 ${\abs{G}} を求めるところに焦点を当てて議論する。
                形式的に表記すると、対称群 ${S_n} が集合 ${\set{0, 1, \ldots, n - 1}} の上に作用するとしたとき、
                我々の興味は生成元の集合 ${X = \set{ x_1, ..., x_k} \subseteq S_n} によって生成された群
                ${G = \angle-bracket{X} \subseteq S_n} の位数を計算することである。
                これにより例えば以下のことが可能になる:
                \listing{
                * ${3 \times 3 \times 3} ルービックキューブのありうる配置の総数を求める。キューブの面は合計 54 個あり、各面の中心は動かさないとしてよいので、合法的な操作は ${S_{48}} の部分群をなすとみなすことができる。(もっと精密な議論をすると、例えばコーナー・キューブとエッジ・キューブが互いに移り変わることはないため ${S_{24} \times S_{24}} の部分群であるということも可能であるが、ここではこの事実は使用しない。)
                }
            }
        >
        +section {軌道安定化群定理} <
            +p{
                一般に部分群の位数や指数を求めるのは簡単なことではない。しかし安定化群\footnote{https://ja.wikipedia.org/wiki/群作用\#軌道と等方部分群}に限って言えば指数を求めるのは比較的簡単である。それには以下の定理が重要である。
                \theorem{
                    群 ${G} を ${S_n} の部分群とし、集合 ${\set{0, 1, \ldots, n - 1}} の上の自然な作用を考える。
                    \eqn(${x \in \set{0, \ldots, n-1}});%
                    の軌道 \footnote{https://ja.wikipedia.org/wiki/群作用\#軌道と等方部分群}を
                    \eqn(${\mathrm{Orb}_G\(x\) := \setsep{ x^g }{g \in G},});%
                    ${x} の安定化群を
                    \eqn(${\mathrm{Stab}_G\(x\) := \setsep{g \in G}{x^g = x}});%
                    と表記することにする。
                    このとき、
                    \eqn(${\abs{\mathrm{Orb}_G\(x\)} \cdot \abs{\mathrm{Stab}_G\(x\)} = \abs{G}});%
                    が成り立つ。
                }

                ${\mathrm{Orb}_G\(x\)} はグラフ理論的なアルゴリズム(深さ優先探索)で効率的に計算できるため、
                安定化群の大きささえわかれば ${\abs{G}} がわかる。

            }
        >
        +section {安定化群を用いた減少列の構成} <
            +p{
                軌道安定化群定理を用いて次々に安定化群を作っていくことを考える。
                ${H_0 = G} として、
                \eqn(${H_1 = \mathrm{Stab}_{H_0}\(u_0\), H_2 = \mathrm{Stab}_{H_1}\(u_1\), \ldots, H_k = \mathrm{Stab}_{H_{k-1}}\(u_{k-1}\) = \set{e}});
                として、${G = H_0 \supseteq H_1 \supseteq H_2 \cdots \supseteq H_k = \set{e}} という部分群の列を構成したとする。
                このとき \eqn(${\abs{G} = \(H_0 : H_1\) \(H_1 : H_2\) \cdots \(H_{k - 1} : H_k\)}); が成り立つ。各 ${\(H_i : H_{i+1}\) = \abs{\mathrm{Orb}_{H_i}\(u_i\)}} が計算できれば ${\abs{G}} も計算できる。
                このようにして順番に全ての点を固定して、各時点での軌道の大きさを求め、それら全てを掛け合わせることで ${\abs{G}} を計算する、というのが Schreier-Sims のアルゴリズムによる位数計算の基本的なアイディアである。

                以上の議論において、各ステップで計算すべきものは二つある。
                \listing{
                    * ${G} の生成元と ${x} が与えられたとき、${\mathrm{Orb}_G\(x\)}
                    * ${G} の生成元と ${x} が与えられたとき、 ${\mathrm{Stab}_G\(x\)} の生成元
                }
                ${\mathrm{Orb}_G\(x\)} は ${G} の作用によって到達可能な点全体の集合であるため、幅優先探索か深さ優先探索で計算できる。
                ${\mathrm{Stab}_G\(x\)} の生成元は難しいが以下のアイディアによって計算できる。
                \listing{
                    * ${\mathrm{Orb}_G\(x\)} の計算中にグラフの探索によって ${x^p = x^q} である ${p, q \in G} が見つかったとする。この時、${x^{p^{-1} \cdot q} = x} であるため、${p^{-1} \cdot q \in \mathrm{Stab}_G\(x\)} である。
                    * 逆に、${\mathrm{Stab}_G\(x\)} の元はすべてこのような元の積で表せる。 (Schreier's Theorem, \cite[`HoltSlide`]; の p.8)
                }

                これを認めれば ${\mathrm{Stab}_G\(x\)} の生成元も計算できる。

                実装には幅優先探索を用いた。以下に擬似コード (\cite[`HoltSlide`]; の p.6) を与える。
                実装本体は GitHub リポジトリ \footnote{https://github.com/koba-e964/rust-schreier-sims/blob/754d0ad1/src/main.rs\#L76-L110} にある。

                \d-code(
                `
                fn orbit_stabilizer(n: 要素数, gen: G の生成元のリスト, v: 固定する点) -> (軌道, 安定化群の生成元) {
                    que: キュー
                    stabilizer_gen: 安定化群の生成元のリスト
                    (v, e) を que に積む (e は単位元)
                    stabilizer_gen <- []
                    for (y, g) in que {
                        if y に訪れたことがある {
                            p(v) = y という情報が記録されていれば、 p^{-1} * g は v を固定する。
                            gen.push(p^{-1} * g);
                            continue;
                        }
                        y に訪れたことにし、g(v) = y という情報を記録する
                        for x in gen {
                            (x(y), g * x) を que に積む
                        }
                    }
                    return (orb, stabilizer_gen)
                }
                `);
            }
        >
        +section{Schreier-Simsのアルゴリズム (愚直)} <
            +p{
                0 から ${n - 1} までの点を順番に固定して、徐々に群を小さくするというのが基本方針である。
                \footnote{ソースコード: https://github.com/koba-e964/rust-schreier-sims/blob/754d0ad1/src/main.rs\#L126-L151}
                上の数式でいうと ${u_0 = 0, u_1 = 1, \ldots, u_{n - 1} = n - 1} である。

                \d-code(
                `
                fn schreier_sims(n: 点数, x: 生成元の集合) -> 位数 {
                    gen := x;
                    ord := 1;
                    for i in 0..n {
                        (orb, stab) := orbit_stabilizer(n, gen, i);
                        ord *= |orb|;
                        gen = stab;
                    }
                    return ord;
                }
                `);

                これの計算量はどうなるだろうか? 各ステップで、生成元の個数は最悪の場合 (軌道の大きさ) 倍になる。
                ${i} を固定するときの軌道の大きさは最大で ${n - i} であるため、これらの積は最悪 ${\app{O}{n\!}} 程度である。
                当初の目標は ${n = 48} の場合に群の位数を求めることだったため、これでは到底間に合わない。

                多項式時間バージョンの Schreier-Sims のアルゴリズムはより賢い工夫をしている。それの解説は次節以降に譲る。

            }
        >
        +section{Schreier-Sims のアルゴリズム (多項式時間)} <
            +p{
                前節のアルゴリズムを高速化し、計算量が多項式に収まるようにする。この改善は Sims \cite[`MO1995`]; による。
                そもそも問題は、固定化群の生成元が多くなりすぎることだったので、そうならないような工夫をすればよい。
            }
            +definition ?:({BSGS}) ?:(`def:BSGS`) {
                正確な定義は \cite[`HoltSlide`]; に譲るとして、感覚的な概念を説明する。
                Base and strong generating set (BSGS) とは、以下の列2個のペア ${\angle-bracket{\beta, S}} である。
                \listing {
                    * ${\beta_i} (${1 \leq i \leq l}): 頂点の列。${S} を "だんだん固定" していく列。
                    * ${S_i} (${1 \leq i \leq l}): 生成元の集合の列。${S_1 \supseteq S_2 \supseteq \cdots S_l} を満たす必要がある。
                    また、${\gen{S_i} = \mathrm{Stab}_{G}\(\set{\beta_1, \ldots, \beta_{i}}\)} を満たさなければならない。
                }
            }
            +definition ?:({Transversal}) ?:(`def:transversal`) {
                ${x \in X} とする。各 ${u \in \mathrm{Orb}_G\(x\)} に対して ${\alpha_u \in G} であって ${x^{\alpha_u} = u} を満たすものを
                集めた集合 ${\setsep{\alpha_u}{u \in \mathrm{Orb}_G\(x\)}} を transversal と呼ぶ。
            }
            +p{
                上で固定化部分群をとったときは生成元が膨らんでいったが、BSGS についていえば生成元はだんだん小さくなっていく。
                (というよりも、だんだん小さくなるように余計な元を足しておくのである。)
                一般の生成元が BSGS であるわけはないため、BSGS を得るためのアルゴリズムが必要である。
                修正された Schreier-Sims のアルゴリズムは、与えられた生成元の集合を、BSGS になるまで大きくしていく、というアイディアに基づいている。
                擬似コードは以下である。
                \d-code(
                `
                    fn orbit_transversal_stabilizer(n: 要素数, gen: G の生成元のリスト, v: 固定する点) -> (軌道と transversal の組, 安定化群の生成元) {
                        /* orbit_stabilizer と同様。軌道の計算と同時に transversal の計算もできることに注意。*/
                    }
                    fn get_transversal(n: usize, orbit_transversal: 軌道と transversal の組) -> transversal の配列表現 {
                        for a in 0..n {
                            ans[a] = (a が軌道に含まれていれば x^g = a となる g を、そうでなければ None)
                        }
                        ans
                    }
                    // g を beta_transversal で示される固定化部分群の元の積として表そうとする。
                    // どうしても残ってしまう余りの部分も返す。
                    pub fn strip(
                        g: 置換,
                        beta_transversals: &[(usize, Transversal)]
                    ) -> (Vec<置換>, 余りの置換) {
                        h <- g;
                        us <- [];
                        for &(beta, ref transversal) in beta_transversals {
                            let moved_to = h[beta];
                            match transversal[moved_to] {
                                ダミー => break,
                                repr => { // repr は beta^{repr} = moved_to を満たす。
                                    h <- h * repr^{-1}
                                    us.push(repr.clone());
                                }
                            }
                        }
                        (us, h) // g = h * us[0] * ... * us[us.len() - 1] を満たす
                    }
                    // 与えられた (beta の列, s) が BSGS かどうか調べ、そうでない場合は何を追加すべきかを返す。
                    fn schreier_sims(
                        n: usize,
                        beta_transversals: &[(usize, Transversal)],
                        s: 置換の列,
                    ) -> Result<(), (Vec<置換>, 余りの置換)> {
                        if beta_transversals.is_empty() {
                            if s.is_empty() {
                                return Ok(());
                            }
                            return Err((vec![], s[0].clone()));
                        }
                        // The first fixed point
                        let beta0 = beta_transversals[0].0;
                        let intersection = (s の中で、beta0 を保つ置換全体);
                        schreier_sims(n, &beta_transversals[1..], &intersection)?; // 再帰
                        // y はナイーブな方法で作った固定化群の生成元
                        let (_, y) = orbit_stabilizer(n, s, beta0);
                        for y in y {
                            let (us, 余り) = strip(&y, &beta_transversals[1..]);
                            if 余り が e でない {
                                異常終了, (us, 余り) を返す
                            }
                        }
                        正常終了
                    }
                    fn incrementally_build_bsgs(
                        n: usize,
                        initial_beta: &[頂点],
                        initial_s: &[置換],
                    ) -> (Vec<(頂点, Transversal)>, Vec<置換>) {
                        let mut beta_transversals = vec![ダミーデータ; initial_beta.len()];
                        let mut s = initial_s.to_vec();
                        let mut used = vec![false; n];
                        let dummy_transversal = vec![]; // dummy transversals
                        loop {
                            {
                                // transversal を計算する。後の schreier_sims 用。
                                let mut cur_s = s.clone();
                                // beta を固定する固定化部分群のようなものを雑にとっていく。
                                // (beta_transversal, s) が BSGS であれば、これは実際に固定化部分群になる。
                                for (beta, transversal_ref) in beta_transversals {
                                    let (orbit_transversal, _) =
                                        orbit_transversal_stabilizer(n, &cur_s, beta);
                                    let transversal = get_transversal(n, orbit_transversal);
                                    *transversal_ref = transversal;
                                    cur_s = (cur_s の中で beta を固定する置換全体);
                                    used[beta] = true;
                                }
                            }

                            // スライド内の Y をインクリメンタルに計算し、問題ないか調べる。
                            match schreier_sims(n, &beta_transversals, &s) {
                                正常終了 => break,
                                (_, h) を返して異常終了 => {
                                    s に h を追加;
                                    // beta に含まれ、h で固定化されない頂点はあるか?
                                    let mut moved = (h で固定化されない頂点の列);
                                    if moved と beta の共通部分がない かつ moved が空でない {
                                        // h で固定化されない頂点は beta の中にはない。
                                        // その中から一つランダムに選ぶ
                                        let point = (moved からランダムにとる);
                                        beta_transversals に (point, dummy_transversal) を追加;
                                    }
                                }
                            }
                        }
                        (beta_transversals, s)
                    }
                `);
                実装は schreier::incrementally_build_bsgs に与えた。
                \footnote{ソースコード: https://github.com/koba-e964/rust-schreier-sims/blob/4e0be968/src/schreier.rs\#L59-L116}
            }
        >
        +section{群の位数の計算} <
            +p {
                ここまでくればそこまで難しくない。
                擬似コードは以下である。
                \d-code(
                `
                    // n: 頂点数, gen: 生成元
                    fn order(n: usize, gen: &[置換]) -> 整数 {
                        let mut order = 1;
                        let (bsgs, _) = incrementally_build_bsgs(n, &[], gen);
                        for (_, transversal) in bsgs {
                            let u = (traversal から計算した (H_i:H_{i+1}) の値);
                            order *= u;
                        }
                        order
                    }
                `);
                実装は schreier::order に与えた。
                \footnote{ソースコード: https://github.com/koba-e964/rust-schreier-sims/blob/4e0be968/src/schreier.rs\#L118-L132}
            }
        >
        +section{謝辞} <
            +p {
                この記事は以下を参考にして書かれました。
                \listing{
                    * \cite[`HoltSlide`];: このスライドを主に利用して実装しました。
                }
            }
        >
    >
>
end
